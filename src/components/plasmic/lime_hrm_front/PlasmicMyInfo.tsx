// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vQU939GjUi82K5u1iSBKF3
// Component: 6n6tk7S80o
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Sidebar from "../../Sidebar"; // plasmic-import: yoRVhunlI-d/component
import CheckboxPrimary from "../../CheckboxPrimary"; // plasmic-import: txP424hXELb/component
import SelectBoxPrimary from "../../SelectBoxPrimary"; // plasmic-import: 3HWfNZURm7l/component
import SelectBoxPrimary__Option from "../../SelectBoxPrimary__Option"; // plasmic-import: dmwcrBXAMAY/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: puPU6pgA-z/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_lime_hrm_front.module.css"; // plasmic-import: vQU939GjUi82K5u1iSBKF3/projectcss
import * as sty from "./PlasmicMyInfo.module.css"; // plasmic-import: 6n6tk7S80o/css

export type PlasmicMyInfo__VariantMembers = {};

export type PlasmicMyInfo__VariantsArgs = {};
type VariantPropType = keyof PlasmicMyInfo__VariantsArgs;
export const PlasmicMyInfo__VariantProps = new Array<VariantPropType>();

export type PlasmicMyInfo__ArgsType = {};
type ArgPropType = keyof PlasmicMyInfo__ArgsType;
export const PlasmicMyInfo__ArgProps = new Array<ArgPropType>();

export type PlasmicMyInfo__OverridesType = {
  root?: p.Flex<"div">;
  sidebar?: p.Flex<typeof Sidebar>;
  divider?: p.Flex<"div">;
  mainContent?: p.Flex<"div">;
  personalInfo?: p.Flex<"div">;
  pValuesRow1?: p.Flex<"div">;
  firstName?: p.Flex<"input">;
  middleName?: p.Flex<"input">;
  lastName?: p.Flex<"input">;
  pValuesRow2?: p.Flex<"div">;
  workerId?: p.Flex<"input">;
  genderBox?: p.Flex<"div">;
  male?: p.Flex<typeof CheckboxPrimary>;
  female?: p.Flex<typeof CheckboxPrimary>;
  nationality?: p.Flex<typeof SelectBoxPrimary>;
  pValuesRow3?: p.Flex<"div">;
  socialSecurity?: p.Flex<"input">;
  spacer?: p.Flex<"div">;
  maritalStatus?: p.Flex<typeof SelectBoxPrimary>;
  pValuesRow4?: p.Flex<"div">;
  driversLicense?: p.Flex<"input">;
  licenseExpDate?: p.Flex<"input">;
  contactInfo?: p.Flex<"div">;
  inputValuesRow12?: p.Flex<"div">;
  street1?: p.Flex<"input">;
  inputValuesRow1?: p.Flex<"div">;
  street2?: p.Flex<"input">;
  homeTelephone?: p.Flex<"input">;
  inputValuesRow13?: p.Flex<"div">;
  city?: p.Flex<"input">;
  mobile?: p.Flex<"input">;
  inputValuesRow14?: p.Flex<"div">;
  stateProvince?: p.Flex<"input">;
  workTelephone?: p.Flex<"input">;
  inputValuesRow15?: p.Flex<"div">;
  zip?: p.Flex<"input">;
  workEmail?: p.Flex<"input">;
  inputValuesRow16?: p.Flex<"div">;
  country?: p.Flex<"input">;
};

export interface DefaultMyInfoProps {
  className?: string;
}

function PlasmicMyInfo__RenderFunc(props: {
  variants: PlasmicMyInfo__VariantsArgs;
  args: PlasmicMyInfo__ArgsType;
  overrides: PlasmicMyInfo__OverridesType;
  dataFetches?: PlasmicMyInfo__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance", sty.sidebar)}
          />

          <div
            data-plasmic-name={"divider"}
            data-plasmic-override={overrides.divider}
            className={classNames(defaultcss.all, sty.divider)}
          >
            <div
              data-plasmic-name={"mainContent"}
              data-plasmic-override={overrides.mainContent}
              className={classNames(defaultcss.all, sty.mainContent)}
            >
              <div
                data-plasmic-name={"personalInfo"}
                data-plasmic-override={overrides.personalInfo}
                className={classNames(defaultcss.all, sty.personalInfo)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__n7IdM
                  )}
                >
                  {"Personal Information"}
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"pValuesRow1"}
                  data-plasmic-override={overrides.pValuesRow1}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.pValuesRow1)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__u1Zkk
                    )}
                  >
                    {"Full Name"}
                  </div>

                  <input
                    data-plasmic-name={"firstName"}
                    data-plasmic-override={overrides.firstName}
                    className={classNames(defaultcss.input, sty.firstName)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"First Name" as const}
                  />

                  <input
                    data-plasmic-name={"middleName"}
                    data-plasmic-override={overrides.middleName}
                    className={classNames(defaultcss.input, sty.middleName)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Middle Name" as const}
                  />

                  <input
                    data-plasmic-name={"lastName"}
                    data-plasmic-override={overrides.lastName}
                    className={classNames(defaultcss.input, sty.lastName)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Last Name" as const}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"pValuesRow2"}
                  data-plasmic-override={overrides.pValuesRow2}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.pValuesRow2)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__ofAl0
                    )}
                  >
                    {"Worker ID"}
                  </div>

                  <input
                    data-plasmic-name={"workerId"}
                    data-plasmic-override={overrides.workerId}
                    className={classNames(defaultcss.input, sty.workerId)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some value" as const}
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"genderBox"}
                    data-plasmic-override={overrides.genderBox}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.genderBox)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__f6Ahn
                      )}
                    >
                      {"Gender"}
                    </div>

                    <CheckboxPrimary
                      data-plasmic-name={"male"}
                      data-plasmic-override={overrides.male}
                      className={classNames("__wab_instance", sty.male)}
                    >
                      {"Male"}
                    </CheckboxPrimary>

                    <CheckboxPrimary
                      data-plasmic-name={"female"}
                      data-plasmic-override={overrides.female}
                      className={classNames("__wab_instance", sty.female)}
                    >
                      {"Female"}
                    </CheckboxPrimary>
                  </p.Stack>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__vXv2Q
                    )}
                  >
                    {"Nationality"}
                  </div>

                  <SelectBoxPrimary
                    data-plasmic-name={"nationality"}
                    data-plasmic-override={overrides.nationality}
                    className={classNames("__wab_instance", sty.nationality)}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"pValuesRow3"}
                  data-plasmic-override={overrides.pValuesRow3}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.pValuesRow3)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__k0RjP
                    )}
                  >
                    {"Social Security Number"}
                  </div>

                  <input
                    data-plasmic-name={"socialSecurity"}
                    data-plasmic-override={overrides.socialSecurity}
                    className={classNames(defaultcss.input, sty.socialSecurity)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some value" as const}
                  />

                  <div
                    data-plasmic-name={"spacer"}
                    data-plasmic-override={overrides.spacer}
                    className={classNames(defaultcss.all, sty.spacer)}
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__h9Ovs
                    )}
                  >
                    {"Marital Status"}
                  </div>

                  <SelectBoxPrimary
                    data-plasmic-name={"maritalStatus"}
                    data-plasmic-override={overrides.maritalStatus}
                    className={classNames("__wab_instance", sty.maritalStatus)}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"pValuesRow4"}
                  data-plasmic-override={overrides.pValuesRow4}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.pValuesRow4)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__fjLb7
                    )}
                  >
                    {"Driver's License #"}
                  </div>

                  <input
                    data-plasmic-name={"driversLicense"}
                    data-plasmic-override={overrides.driversLicense}
                    className={classNames(defaultcss.input, sty.driversLicense)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some value" as const}
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___0Ggm5
                    )}
                  >
                    {"License Expiration Date"}
                  </div>

                  <input
                    data-plasmic-name={"licenseExpDate"}
                    data-plasmic-override={overrides.licenseExpDate}
                    className={classNames(defaultcss.input, sty.licenseExpDate)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some value" as const}
                  />
                </p.Stack>

                <ButtonPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.buttonPrimary__odcZj
                  )}
                  prop={"Edit"}
                />
              </div>

              <div
                data-plasmic-name={"contactInfo"}
                data-plasmic-override={overrides.contactInfo}
                className={classNames(defaultcss.all, sty.contactInfo)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox___6RBrt
                  )}
                >
                  {"Contact Information"}
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inputValuesRow12"}
                  data-plasmic-override={overrides.inputValuesRow12}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.inputValuesRow12)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__byLv5
                    )}
                  >
                    {"Address Street #1"}
                  </div>

                  <input
                    data-plasmic-name={"street1"}
                    data-plasmic-override={overrides.street1}
                    className={classNames(defaultcss.input, sty.street1)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inputValuesRow1"}
                  data-plasmic-override={overrides.inputValuesRow1}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.inputValuesRow1)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__zAsDz
                    )}
                  >
                    {"Address Street #2"}
                  </div>

                  <input
                    data-plasmic-name={"street2"}
                    data-plasmic-override={overrides.street2}
                    className={classNames(defaultcss.input, sty.street2)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__fb2YN
                    )}
                  >
                    {"      Home Telephone"}
                  </div>

                  <input
                    data-plasmic-name={"homeTelephone"}
                    data-plasmic-override={overrides.homeTelephone}
                    className={classNames(defaultcss.input, sty.homeTelephone)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inputValuesRow13"}
                  data-plasmic-override={overrides.inputValuesRow13}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.inputValuesRow13)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___3OWgx
                    )}
                  >
                    {"City"}
                  </div>

                  <input
                    data-plasmic-name={"city"}
                    data-plasmic-override={overrides.city}
                    className={classNames(defaultcss.input, sty.city)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__rLtoH
                    )}
                  >
                    {"      Mobile"}
                  </div>

                  <input
                    data-plasmic-name={"mobile"}
                    data-plasmic-override={overrides.mobile}
                    className={classNames(defaultcss.input, sty.mobile)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inputValuesRow14"}
                  data-plasmic-override={overrides.inputValuesRow14}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.inputValuesRow14)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___7Gc2Y
                    )}
                  >
                    {"State/Province"}
                  </div>

                  <input
                    data-plasmic-name={"stateProvince"}
                    data-plasmic-override={overrides.stateProvince}
                    className={classNames(defaultcss.input, sty.stateProvince)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__gOlIk
                    )}
                  >
                    {"Work Telephone"}
                  </div>

                  <input
                    data-plasmic-name={"workTelephone"}
                    data-plasmic-override={overrides.workTelephone}
                    className={classNames(defaultcss.input, sty.workTelephone)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inputValuesRow15"}
                  data-plasmic-override={overrides.inputValuesRow15}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.inputValuesRow15)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__u7H6
                    )}
                  >
                    {"Zip/Postal Code"}
                  </div>

                  <input
                    data-plasmic-name={"zip"}
                    data-plasmic-override={overrides.zip}
                    className={classNames(defaultcss.input, sty.zip)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__mmEhm
                    )}
                  >
                    {"    Work Email"}
                  </div>

                  <input
                    data-plasmic-name={"workEmail"}
                    data-plasmic-override={overrides.workEmail}
                    className={classNames(defaultcss.input, sty.workEmail)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"inputValuesRow16"}
                  data-plasmic-override={overrides.inputValuesRow16}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.inputValuesRow16)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__fsIrE
                    )}
                  >
                    {"Country"}
                  </div>

                  <input
                    data-plasmic-name={"country"}
                    data-plasmic-override={overrides.country}
                    className={classNames(defaultcss.input, sty.country)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />
                </p.Stack>

                <ButtonPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.buttonPrimary__krhJh
                  )}
                  prop={"Edit"}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sidebar",
    "divider",
    "mainContent",
    "personalInfo",
    "pValuesRow1",
    "firstName",
    "middleName",
    "lastName",
    "pValuesRow2",
    "workerId",
    "genderBox",
    "male",
    "female",
    "nationality",
    "pValuesRow3",
    "socialSecurity",
    "spacer",
    "maritalStatus",
    "pValuesRow4",
    "driversLicense",
    "licenseExpDate",
    "contactInfo",
    "inputValuesRow12",
    "street1",
    "inputValuesRow1",
    "street2",
    "homeTelephone",
    "inputValuesRow13",
    "city",
    "mobile",
    "inputValuesRow14",
    "stateProvince",
    "workTelephone",
    "inputValuesRow15",
    "zip",
    "workEmail",
    "inputValuesRow16",
    "country"
  ],
  sidebar: ["sidebar"],
  divider: [
    "divider",
    "mainContent",
    "personalInfo",
    "pValuesRow1",
    "firstName",
    "middleName",
    "lastName",
    "pValuesRow2",
    "workerId",
    "genderBox",
    "male",
    "female",
    "nationality",
    "pValuesRow3",
    "socialSecurity",
    "spacer",
    "maritalStatus",
    "pValuesRow4",
    "driversLicense",
    "licenseExpDate",
    "contactInfo",
    "inputValuesRow12",
    "street1",
    "inputValuesRow1",
    "street2",
    "homeTelephone",
    "inputValuesRow13",
    "city",
    "mobile",
    "inputValuesRow14",
    "stateProvince",
    "workTelephone",
    "inputValuesRow15",
    "zip",
    "workEmail",
    "inputValuesRow16",
    "country"
  ],
  mainContent: [
    "mainContent",
    "personalInfo",
    "pValuesRow1",
    "firstName",
    "middleName",
    "lastName",
    "pValuesRow2",
    "workerId",
    "genderBox",
    "male",
    "female",
    "nationality",
    "pValuesRow3",
    "socialSecurity",
    "spacer",
    "maritalStatus",
    "pValuesRow4",
    "driversLicense",
    "licenseExpDate",
    "contactInfo",
    "inputValuesRow12",
    "street1",
    "inputValuesRow1",
    "street2",
    "homeTelephone",
    "inputValuesRow13",
    "city",
    "mobile",
    "inputValuesRow14",
    "stateProvince",
    "workTelephone",
    "inputValuesRow15",
    "zip",
    "workEmail",
    "inputValuesRow16",
    "country"
  ],
  personalInfo: [
    "personalInfo",
    "pValuesRow1",
    "firstName",
    "middleName",
    "lastName",
    "pValuesRow2",
    "workerId",
    "genderBox",
    "male",
    "female",
    "nationality",
    "pValuesRow3",
    "socialSecurity",
    "spacer",
    "maritalStatus",
    "pValuesRow4",
    "driversLicense",
    "licenseExpDate"
  ],
  pValuesRow1: ["pValuesRow1", "firstName", "middleName", "lastName"],
  firstName: ["firstName"],
  middleName: ["middleName"],
  lastName: ["lastName"],
  pValuesRow2: [
    "pValuesRow2",
    "workerId",
    "genderBox",
    "male",
    "female",
    "nationality"
  ],
  workerId: ["workerId"],
  genderBox: ["genderBox", "male", "female"],
  male: ["male"],
  female: ["female"],
  nationality: ["nationality"],
  pValuesRow3: ["pValuesRow3", "socialSecurity", "spacer", "maritalStatus"],
  socialSecurity: ["socialSecurity"],
  spacer: ["spacer"],
  maritalStatus: ["maritalStatus"],
  pValuesRow4: ["pValuesRow4", "driversLicense", "licenseExpDate"],
  driversLicense: ["driversLicense"],
  licenseExpDate: ["licenseExpDate"],
  contactInfo: [
    "contactInfo",
    "inputValuesRow12",
    "street1",
    "inputValuesRow1",
    "street2",
    "homeTelephone",
    "inputValuesRow13",
    "city",
    "mobile",
    "inputValuesRow14",
    "stateProvince",
    "workTelephone",
    "inputValuesRow15",
    "zip",
    "workEmail",
    "inputValuesRow16",
    "country"
  ],
  inputValuesRow12: ["inputValuesRow12", "street1"],
  street1: ["street1"],
  inputValuesRow1: ["inputValuesRow1", "street2", "homeTelephone"],
  street2: ["street2"],
  homeTelephone: ["homeTelephone"],
  inputValuesRow13: ["inputValuesRow13", "city", "mobile"],
  city: ["city"],
  mobile: ["mobile"],
  inputValuesRow14: ["inputValuesRow14", "stateProvince", "workTelephone"],
  stateProvince: ["stateProvince"],
  workTelephone: ["workTelephone"],
  inputValuesRow15: ["inputValuesRow15", "zip", "workEmail"],
  zip: ["zip"],
  workEmail: ["workEmail"],
  inputValuesRow16: ["inputValuesRow16", "country"],
  country: ["country"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sidebar: typeof Sidebar;
  divider: "div";
  mainContent: "div";
  personalInfo: "div";
  pValuesRow1: "div";
  firstName: "input";
  middleName: "input";
  lastName: "input";
  pValuesRow2: "div";
  workerId: "input";
  genderBox: "div";
  male: typeof CheckboxPrimary;
  female: typeof CheckboxPrimary;
  nationality: typeof SelectBoxPrimary;
  pValuesRow3: "div";
  socialSecurity: "input";
  spacer: "div";
  maritalStatus: typeof SelectBoxPrimary;
  pValuesRow4: "div";
  driversLicense: "input";
  licenseExpDate: "input";
  contactInfo: "div";
  inputValuesRow12: "div";
  street1: "input";
  inputValuesRow1: "div";
  street2: "input";
  homeTelephone: "input";
  inputValuesRow13: "div";
  city: "input";
  mobile: "input";
  inputValuesRow14: "div";
  stateProvince: "input";
  workTelephone: "input";
  inputValuesRow15: "div";
  zip: "input";
  workEmail: "input";
  inputValuesRow16: "div";
  country: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMyInfo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMyInfo__VariantsArgs;
    args?: PlasmicMyInfo__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicMyInfo__Fetches;
  } & Omit<PlasmicMyInfo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMyInfo__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMyInfo__ArgProps,
      internalVariantPropNames: PlasmicMyInfo__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicMyInfo__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMyInfo";
  } else {
    func.displayName = `PlasmicMyInfo.${nodeName}`;
  }
  return func;
}

export const PlasmicMyInfo = Object.assign(
  // Top-level PlasmicMyInfo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sidebar: makeNodeComponent("sidebar"),
    divider: makeNodeComponent("divider"),
    mainContent: makeNodeComponent("mainContent"),
    personalInfo: makeNodeComponent("personalInfo"),
    pValuesRow1: makeNodeComponent("pValuesRow1"),
    firstName: makeNodeComponent("firstName"),
    middleName: makeNodeComponent("middleName"),
    lastName: makeNodeComponent("lastName"),
    pValuesRow2: makeNodeComponent("pValuesRow2"),
    workerId: makeNodeComponent("workerId"),
    genderBox: makeNodeComponent("genderBox"),
    male: makeNodeComponent("male"),
    female: makeNodeComponent("female"),
    nationality: makeNodeComponent("nationality"),
    pValuesRow3: makeNodeComponent("pValuesRow3"),
    socialSecurity: makeNodeComponent("socialSecurity"),
    spacer: makeNodeComponent("spacer"),
    maritalStatus: makeNodeComponent("maritalStatus"),
    pValuesRow4: makeNodeComponent("pValuesRow4"),
    driversLicense: makeNodeComponent("driversLicense"),
    licenseExpDate: makeNodeComponent("licenseExpDate"),
    contactInfo: makeNodeComponent("contactInfo"),
    inputValuesRow12: makeNodeComponent("inputValuesRow12"),
    street1: makeNodeComponent("street1"),
    inputValuesRow1: makeNodeComponent("inputValuesRow1"),
    street2: makeNodeComponent("street2"),
    homeTelephone: makeNodeComponent("homeTelephone"),
    inputValuesRow13: makeNodeComponent("inputValuesRow13"),
    city: makeNodeComponent("city"),
    mobile: makeNodeComponent("mobile"),
    inputValuesRow14: makeNodeComponent("inputValuesRow14"),
    stateProvince: makeNodeComponent("stateProvince"),
    workTelephone: makeNodeComponent("workTelephone"),
    inputValuesRow15: makeNodeComponent("inputValuesRow15"),
    zip: makeNodeComponent("zip"),
    workEmail: makeNodeComponent("workEmail"),
    inputValuesRow16: makeNodeComponent("inputValuesRow16"),
    country: makeNodeComponent("country"),

    // Metadata about props expected for PlasmicMyInfo
    internalVariantProps: PlasmicMyInfo__VariantProps,
    internalArgProps: PlasmicMyInfo__ArgProps
  }
);

export default PlasmicMyInfo;
/* prettier-ignore-end */
