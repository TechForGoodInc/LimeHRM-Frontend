// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vQU939GjUi82K5u1iSBKF3
// Component: 6n6tk7S80o
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Sidebar from "../../Sidebar"; // plasmic-import: yoRVhunlI-d/component
import CheckboxPrimary from "../../CheckboxPrimary"; // plasmic-import: txP424hXELb/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: puPU6pgA-z/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_lime_hrm_front.module.css"; // plasmic-import: vQU939GjUi82K5u1iSBKF3/projectcss
import * as sty from "./PlasmicMyInfo.module.css"; // plasmic-import: 6n6tk7S80o/css

export type PlasmicMyInfo__VariantMembers = {};

export type PlasmicMyInfo__VariantsArgs = {};
type VariantPropType = keyof PlasmicMyInfo__VariantsArgs;
export const PlasmicMyInfo__VariantProps = new Array<VariantPropType>();

export type PlasmicMyInfo__ArgsType = {};
type ArgPropType = keyof PlasmicMyInfo__ArgsType;
export const PlasmicMyInfo__ArgProps = new Array<ArgPropType>();

export type PlasmicMyInfo__OverridesType = {
  root?: p.Flex<"div">;
  sidebar?: p.Flex<typeof Sidebar>;
  divider?: p.Flex<"div">;
  mainContent1?: p.Flex<"div">;
  infoRow1?: p.Flex<"div">;
  firstName?: p.Flex<"input">;
  lastName?: p.Flex<"input">;
  teamName?: p.Flex<"input">;
  positionName?: p.Flex<"input">;
  infoRow2?: p.Flex<"div">;
  genderBox?: p.Flex<"div">;
  male?: p.Flex<typeof CheckboxPrimary>;
  female?: p.Flex<typeof CheckboxPrimary>;
  maritalStatus?: p.Flex<"input">;
  salary?: p.Flex<"input">;
  infoRow3?: p.Flex<"div">;
  homeAddress?: p.Flex<"input">;
  department?: p.Flex<"input">;
  jobStatus?: p.Flex<"input">;
  mainContent2?: p.Flex<"div">;
  infoRow42?: p.Flex<"div">;
  homePhone?: p.Flex<"input">;
  mobile?: p.Flex<"input">;
  infoRow52?: p.Flex<"div">;
  birthDate?: p.Flex<"input">;
  startDate?: p.Flex<"input">;
  endDate?: p.Flex<"input">;
  infoRow62?: p.Flex<"div">;
  email?: p.Flex<"input">;
  personalEmail?: p.Flex<"input">;
  managerEmail?: p.Flex<"input">;
  saveButton?: p.Flex<typeof ButtonPrimary>;
};

export interface DefaultMyInfoProps {
  className?: string;
}

function PlasmicMyInfo__RenderFunc(props: {
  variants: PlasmicMyInfo__VariantsArgs;
  args: PlasmicMyInfo__ArgsType;
  overrides: PlasmicMyInfo__OverridesType;
  dataFetches?: PlasmicMyInfo__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance", sty.sidebar)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"divider"}
            data-plasmic-override={overrides.divider}
            hasGap={true}
            className={classNames(defaultcss.all, sty.divider)}
          >
            <p.Stack
              as={"div"}
              data-plasmic-name={"mainContent1"}
              data-plasmic-override={overrides.mainContent1}
              hasGap={true}
              className={classNames(defaultcss.all, sty.mainContent1)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"infoRow1"}
                data-plasmic-override={overrides.infoRow1}
                hasGap={true}
                className={classNames(defaultcss.all, sty.infoRow1)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__u1Zkk
                  )}
                >
                  {"Full Name"}
                </div>

                <input
                  data-plasmic-name={"firstName"}
                  data-plasmic-override={overrides.firstName}
                  className={classNames(defaultcss.input, sty.firstName)}
                  placeholder={"" as const}
                  type={"text" as const}
                />

                <input
                  data-plasmic-name={"lastName"}
                  data-plasmic-override={overrides.lastName}
                  className={classNames(defaultcss.input, sty.lastName)}
                  placeholder={"" as const}
                  size={1 as const}
                  type={"text" as const}
                  value={"" as const}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__mgTjj
                  )}
                >
                  {"Team Name"}
                </div>

                <input
                  data-plasmic-name={"teamName"}
                  data-plasmic-override={overrides.teamName}
                  className={classNames(defaultcss.input, sty.teamName)}
                  placeholder={"" as const}
                  size={1 as const}
                  type={"text" as const}
                  value={"" as const}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__aizBo
                  )}
                >
                  {"Position Name"}
                </div>

                <input
                  data-plasmic-name={"positionName"}
                  data-plasmic-override={overrides.positionName}
                  className={classNames(defaultcss.input, sty.positionName)}
                  placeholder={"" as const}
                  size={1 as const}
                  type={"text" as const}
                  value={"" as const}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"infoRow2"}
                data-plasmic-override={overrides.infoRow2}
                hasGap={true}
                className={classNames(defaultcss.all, sty.infoRow2)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"genderBox"}
                  data-plasmic-override={overrides.genderBox}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.genderBox)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__f6Ahn
                    )}
                  >
                    {"Gender"}
                  </div>

                  <CheckboxPrimary
                    data-plasmic-name={"male"}
                    data-plasmic-override={overrides.male}
                    className={classNames("__wab_instance", sty.male)}
                  >
                    {"Male"}
                  </CheckboxPrimary>

                  <CheckboxPrimary
                    data-plasmic-name={"female"}
                    data-plasmic-override={overrides.female}
                    className={classNames("__wab_instance", sty.female)}
                  >
                    {"Female"}
                  </CheckboxPrimary>
                </p.Stack>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__pzPdt
                  )}
                >
                  {"Marital Status"}
                </div>

                <input
                  data-plasmic-name={"maritalStatus"}
                  data-plasmic-override={overrides.maritalStatus}
                  className={classNames(defaultcss.input, sty.maritalStatus)}
                  placeholder={"" as const}
                  type={"text" as const}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__sFv4G
                  )}
                >
                  {"Salary"}
                </div>

                <input
                  data-plasmic-name={"salary"}
                  data-plasmic-override={overrides.salary}
                  className={classNames(defaultcss.input, sty.salary)}
                  placeholder={"" as const}
                  type={"text" as const}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"infoRow3"}
                data-plasmic-override={overrides.infoRow3}
                hasGap={true}
                className={classNames(defaultcss.all, sty.infoRow3)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__zvfin
                  )}
                >
                  {"Home Address"}
                </div>

                <input
                  data-plasmic-name={"homeAddress"}
                  data-plasmic-override={overrides.homeAddress}
                  className={classNames(defaultcss.input, sty.homeAddress)}
                  placeholder={"" as const}
                  type={"text" as const}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__sfZ
                  )}
                >
                  {"Department"}
                </div>

                <input
                  data-plasmic-name={"department"}
                  data-plasmic-override={overrides.department}
                  className={classNames(defaultcss.input, sty.department)}
                  placeholder={"" as const}
                  type={"text" as const}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox___696U0
                  )}
                >
                  {"Job Status"}
                </div>

                <input
                  data-plasmic-name={"jobStatus"}
                  data-plasmic-override={overrides.jobStatus}
                  className={classNames(defaultcss.input, sty.jobStatus)}
                  placeholder={"" as const}
                  type={"text" as const}
                />
              </p.Stack>
            </p.Stack>

            <p.Stack
              as={"div"}
              data-plasmic-name={"mainContent2"}
              data-plasmic-override={overrides.mainContent2}
              hasGap={true}
              className={classNames(defaultcss.all, sty.mainContent2)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"infoRow42"}
                data-plasmic-override={overrides.infoRow42}
                hasGap={true}
                className={classNames(defaultcss.all, sty.infoRow42)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox___5ReX2
                  )}
                >
                  {"Home Telephone"}
                </div>

                <input
                  data-plasmic-name={"homePhone"}
                  data-plasmic-override={overrides.homePhone}
                  className={classNames(defaultcss.input, sty.homePhone)}
                  placeholder={"" as const}
                  type={"text" as const}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__cuRb
                  )}
                >
                  {"Mobile"}
                </div>

                <input
                  data-plasmic-name={"mobile"}
                  data-plasmic-override={overrides.mobile}
                  className={classNames(defaultcss.input, sty.mobile)}
                  placeholder={"" as const}
                  type={"text" as const}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"infoRow52"}
                data-plasmic-override={overrides.infoRow52}
                hasGap={true}
                className={classNames(defaultcss.all, sty.infoRow52)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__lBPje
                  )}
                >
                  {"Birth Date"}
                </div>

                <input
                  data-plasmic-name={"birthDate"}
                  data-plasmic-override={overrides.birthDate}
                  className={classNames(defaultcss.input, sty.birthDate)}
                  placeholder={"" as const}
                  type={"text" as const}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__o3ADg
                  )}
                >
                  {"Start Date"}
                </div>

                <input
                  data-plasmic-name={"startDate"}
                  data-plasmic-override={overrides.startDate}
                  className={classNames(defaultcss.input, sty.startDate)}
                  placeholder={"" as const}
                  type={"text" as const}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__v9MEm
                  )}
                >
                  {"End Date"}
                </div>

                <input
                  data-plasmic-name={"endDate"}
                  data-plasmic-override={overrides.endDate}
                  className={classNames(defaultcss.input, sty.endDate)}
                  placeholder={"" as const}
                  type={"text" as const}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"infoRow62"}
                data-plasmic-override={overrides.infoRow62}
                hasGap={true}
                className={classNames(defaultcss.all, sty.infoRow62)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__jgDtb
                  )}
                >
                  {"Email"}
                </div>

                <input
                  data-plasmic-name={"email"}
                  data-plasmic-override={overrides.email}
                  className={classNames(defaultcss.input, sty.email)}
                  placeholder={"" as const}
                  type={"text" as const}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__vDTi
                  )}
                >
                  {"Personal Email"}
                </div>

                <input
                  data-plasmic-name={"personalEmail"}
                  data-plasmic-override={overrides.personalEmail}
                  className={classNames(defaultcss.input, sty.personalEmail)}
                  placeholder={"" as const}
                  type={"text" as const}
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__oQzeB
                  )}
                >
                  {"Manager Email"}
                </div>

                <input
                  data-plasmic-name={"managerEmail"}
                  data-plasmic-override={overrides.managerEmail}
                  className={classNames(defaultcss.input, sty.managerEmail)}
                  placeholder={"" as const}
                  type={"text" as const}
                />

                <ButtonPrimary
                  data-plasmic-name={"saveButton"}
                  data-plasmic-override={overrides.saveButton}
                  className={classNames("__wab_instance", sty.saveButton)}
                  prop={"Save"}
                />
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sidebar",
    "divider",
    "mainContent1",
    "infoRow1",
    "firstName",
    "lastName",
    "teamName",
    "positionName",
    "infoRow2",
    "genderBox",
    "male",
    "female",
    "maritalStatus",
    "salary",
    "infoRow3",
    "homeAddress",
    "department",
    "jobStatus",
    "mainContent2",
    "infoRow42",
    "homePhone",
    "mobile",
    "infoRow52",
    "birthDate",
    "startDate",
    "endDate",
    "infoRow62",
    "email",
    "personalEmail",
    "managerEmail",
    "saveButton"
  ],
  sidebar: ["sidebar"],
  divider: [
    "divider",
    "mainContent1",
    "infoRow1",
    "firstName",
    "lastName",
    "teamName",
    "positionName",
    "infoRow2",
    "genderBox",
    "male",
    "female",
    "maritalStatus",
    "salary",
    "infoRow3",
    "homeAddress",
    "department",
    "jobStatus",
    "mainContent2",
    "infoRow42",
    "homePhone",
    "mobile",
    "infoRow52",
    "birthDate",
    "startDate",
    "endDate",
    "infoRow62",
    "email",
    "personalEmail",
    "managerEmail",
    "saveButton"
  ],
  mainContent1: [
    "mainContent1",
    "infoRow1",
    "firstName",
    "lastName",
    "teamName",
    "positionName",
    "infoRow2",
    "genderBox",
    "male",
    "female",
    "maritalStatus",
    "salary",
    "infoRow3",
    "homeAddress",
    "department",
    "jobStatus"
  ],
  infoRow1: ["infoRow1", "firstName", "lastName", "teamName", "positionName"],
  firstName: ["firstName"],
  lastName: ["lastName"],
  teamName: ["teamName"],
  positionName: ["positionName"],
  infoRow2: [
    "infoRow2",
    "genderBox",
    "male",
    "female",
    "maritalStatus",
    "salary"
  ],
  genderBox: ["genderBox", "male", "female"],
  male: ["male"],
  female: ["female"],
  maritalStatus: ["maritalStatus"],
  salary: ["salary"],
  infoRow3: ["infoRow3", "homeAddress", "department", "jobStatus"],
  homeAddress: ["homeAddress"],
  department: ["department"],
  jobStatus: ["jobStatus"],
  mainContent2: [
    "mainContent2",
    "infoRow42",
    "homePhone",
    "mobile",
    "infoRow52",
    "birthDate",
    "startDate",
    "endDate",
    "infoRow62",
    "email",
    "personalEmail",
    "managerEmail",
    "saveButton"
  ],
  infoRow42: ["infoRow42", "homePhone", "mobile"],
  homePhone: ["homePhone"],
  mobile: ["mobile"],
  infoRow52: ["infoRow52", "birthDate", "startDate", "endDate"],
  birthDate: ["birthDate"],
  startDate: ["startDate"],
  endDate: ["endDate"],
  infoRow62: [
    "infoRow62",
    "email",
    "personalEmail",
    "managerEmail",
    "saveButton"
  ],
  email: ["email"],
  personalEmail: ["personalEmail"],
  managerEmail: ["managerEmail"],
  saveButton: ["saveButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sidebar: typeof Sidebar;
  divider: "div";
  mainContent1: "div";
  infoRow1: "div";
  firstName: "input";
  lastName: "input";
  teamName: "input";
  positionName: "input";
  infoRow2: "div";
  genderBox: "div";
  male: typeof CheckboxPrimary;
  female: typeof CheckboxPrimary;
  maritalStatus: "input";
  salary: "input";
  infoRow3: "div";
  homeAddress: "input";
  department: "input";
  jobStatus: "input";
  mainContent2: "div";
  infoRow42: "div";
  homePhone: "input";
  mobile: "input";
  infoRow52: "div";
  birthDate: "input";
  startDate: "input";
  endDate: "input";
  infoRow62: "div";
  email: "input";
  personalEmail: "input";
  managerEmail: "input";
  saveButton: typeof ButtonPrimary;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMyInfo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMyInfo__VariantsArgs;
    args?: PlasmicMyInfo__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicMyInfo__Fetches;
  } & Omit<PlasmicMyInfo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMyInfo__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMyInfo__ArgProps,
      internalVariantPropNames: PlasmicMyInfo__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicMyInfo__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMyInfo";
  } else {
    func.displayName = `PlasmicMyInfo.${nodeName}`;
  }
  return func;
}

export const PlasmicMyInfo = Object.assign(
  // Top-level PlasmicMyInfo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sidebar: makeNodeComponent("sidebar"),
    divider: makeNodeComponent("divider"),
    mainContent1: makeNodeComponent("mainContent1"),
    infoRow1: makeNodeComponent("infoRow1"),
    firstName: makeNodeComponent("firstName"),
    lastName: makeNodeComponent("lastName"),
    teamName: makeNodeComponent("teamName"),
    positionName: makeNodeComponent("positionName"),
    infoRow2: makeNodeComponent("infoRow2"),
    genderBox: makeNodeComponent("genderBox"),
    male: makeNodeComponent("male"),
    female: makeNodeComponent("female"),
    maritalStatus: makeNodeComponent("maritalStatus"),
    salary: makeNodeComponent("salary"),
    infoRow3: makeNodeComponent("infoRow3"),
    homeAddress: makeNodeComponent("homeAddress"),
    department: makeNodeComponent("department"),
    jobStatus: makeNodeComponent("jobStatus"),
    mainContent2: makeNodeComponent("mainContent2"),
    infoRow42: makeNodeComponent("infoRow42"),
    homePhone: makeNodeComponent("homePhone"),
    mobile: makeNodeComponent("mobile"),
    infoRow52: makeNodeComponent("infoRow52"),
    birthDate: makeNodeComponent("birthDate"),
    startDate: makeNodeComponent("startDate"),
    endDate: makeNodeComponent("endDate"),
    infoRow62: makeNodeComponent("infoRow62"),
    email: makeNodeComponent("email"),
    personalEmail: makeNodeComponent("personalEmail"),
    managerEmail: makeNodeComponent("managerEmail"),
    saveButton: makeNodeComponent("saveButton"),

    // Metadata about props expected for PlasmicMyInfo
    internalVariantProps: PlasmicMyInfo__VariantProps,
    internalArgProps: PlasmicMyInfo__ArgProps
  }
);

export default PlasmicMyInfo;
/* prettier-ignore-end */
