// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vQU939GjUi82K5u1iSBKF3
// Component: 6n6tk7S80o
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Sidebar from "../../Sidebar"; // plasmic-import: yoRVhunlI-d/component
import CheckboxPrimary from "../../CheckboxPrimary"; // plasmic-import: txP424hXELb/component
import SelectBoxPrimary from "../../SelectBoxPrimary"; // plasmic-import: 3HWfNZURm7l/component
import SelectBoxPrimary__Option from "../../SelectBoxPrimary__Option"; // plasmic-import: dmwcrBXAMAY/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: puPU6pgA-z/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_lime_hrm_front.module.css"; // plasmic-import: vQU939GjUi82K5u1iSBKF3/projectcss
import * as sty from "./PlasmicMyInfo.module.css"; // plasmic-import: 6n6tk7S80o/css

export type PlasmicMyInfo__VariantMembers = {};

export type PlasmicMyInfo__VariantsArgs = {};
type VariantPropType = keyof PlasmicMyInfo__VariantsArgs;
export const PlasmicMyInfo__VariantProps = new Array<VariantPropType>();

export type PlasmicMyInfo__ArgsType = {};
type ArgPropType = keyof PlasmicMyInfo__ArgsType;
export const PlasmicMyInfo__ArgProps = new Array<ArgPropType>();

export type PlasmicMyInfo__OverridesType = {
  root?: p.Flex<"div">;
  sidebar?: p.Flex<typeof Sidebar>;
  divider?: p.Flex<"div">;
  mainContent?: p.Flex<"div">;
  infoContent?: p.Flex<"div">;
  myInformation?: p.Flex<"div">;
  infoRow1?: p.Flex<"div">;
  firstName?: p.Flex<"input">;
  middleName?: p.Flex<"input">;
  lastName?: p.Flex<"input">;
  infoRow2?: p.Flex<"div">;
  genderBox?: p.Flex<"div">;
  male?: p.Flex<typeof CheckboxPrimary>;
  female?: p.Flex<typeof CheckboxPrimary>;
  maritalStatusBox?: p.Flex<typeof SelectBoxPrimary>;
  infoRow3?: p.Flex<"div">;
  street1?: p.Flex<"input">;
  street2?: p.Flex<"input">;
  infoRow4?: p.Flex<"div">;
  homePhone?: p.Flex<"input">;
  mobile?: p.Flex<"input">;
  workPhone?: p.Flex<"input">;
  infoRow5?: p.Flex<"div">;
  city?: p.Flex<"input">;
  state?: p.Flex<"input">;
  zip?: p.Flex<"input">;
  infoRow6?: p.Flex<"div">;
  email?: p.Flex<"input">;
  country?: p.Flex<"input">;
  saveButton?: p.Flex<typeof ButtonPrimary>;
};

export interface DefaultMyInfoProps {
  className?: string;
}

function PlasmicMyInfo__RenderFunc(props: {
  variants: PlasmicMyInfo__VariantsArgs;
  args: PlasmicMyInfo__ArgsType;
  overrides: PlasmicMyInfo__OverridesType;
  dataFetches?: PlasmicMyInfo__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance", sty.sidebar)}
          />

          <div
            data-plasmic-name={"divider"}
            data-plasmic-override={overrides.divider}
            className={classNames(defaultcss.all, sty.divider)}
          >
            <div
              data-plasmic-name={"mainContent"}
              data-plasmic-override={overrides.mainContent}
              className={classNames(defaultcss.all, sty.mainContent)}
            >
              <div
                data-plasmic-name={"infoContent"}
                data-plasmic-override={overrides.infoContent}
                className={classNames(defaultcss.all, sty.infoContent)}
              >
                <div
                  data-plasmic-name={"myInformation"}
                  data-plasmic-override={overrides.myInformation}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.myInformation
                  )}
                >
                  {"My Information"}
                </div>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"infoRow1"}
                  data-plasmic-override={overrides.infoRow1}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.infoRow1)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__u1Zkk
                    )}
                  >
                    {"Full Name"}
                  </div>

                  <input
                    data-plasmic-name={"firstName"}
                    data-plasmic-override={overrides.firstName}
                    className={classNames(defaultcss.input, sty.firstName)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"First Name" as const}
                  />

                  <input
                    data-plasmic-name={"middleName"}
                    data-plasmic-override={overrides.middleName}
                    className={classNames(defaultcss.input, sty.middleName)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Middle Name" as const}
                  />

                  <input
                    data-plasmic-name={"lastName"}
                    data-plasmic-override={overrides.lastName}
                    className={classNames(defaultcss.input, sty.lastName)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Last Name" as const}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"infoRow2"}
                  data-plasmic-override={overrides.infoRow2}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.infoRow2)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"genderBox"}
                    data-plasmic-override={overrides.genderBox}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.genderBox)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__f6Ahn
                      )}
                    >
                      {"Gender"}
                    </div>

                    <CheckboxPrimary
                      data-plasmic-name={"male"}
                      data-plasmic-override={overrides.male}
                      className={classNames("__wab_instance", sty.male)}
                    >
                      {"Male"}
                    </CheckboxPrimary>

                    <CheckboxPrimary
                      data-plasmic-name={"female"}
                      data-plasmic-override={overrides.female}
                      className={classNames("__wab_instance", sty.female)}
                    >
                      {"Female"}
                    </CheckboxPrimary>
                  </p.Stack>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__pzPdt
                    )}
                  >
                    {"Marital Status"}
                  </div>

                  <SelectBoxPrimary
                    data-plasmic-name={"maritalStatusBox"}
                    data-plasmic-override={overrides.maritalStatusBox}
                    className={classNames(
                      "__wab_instance",
                      sty.maritalStatusBox
                    )}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"infoRow3"}
                  data-plasmic-override={overrides.infoRow3}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.infoRow3)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__zvfin
                    )}
                  >
                    {"Address Street #1"}
                  </div>

                  <input
                    data-plasmic-name={"street1"}
                    data-plasmic-override={overrides.street1}
                    className={classNames(defaultcss.input, sty.street1)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__zQTz
                    )}
                  >
                    {"Address Street #2"}
                  </div>

                  <input
                    data-plasmic-name={"street2"}
                    data-plasmic-override={overrides.street2}
                    className={classNames(defaultcss.input, sty.street2)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"infoRow4"}
                  data-plasmic-override={overrides.infoRow4}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.infoRow4)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__bhCVm
                    )}
                  >
                    {"Home Telephone"}
                  </div>

                  <input
                    data-plasmic-name={"homePhone"}
                    data-plasmic-override={overrides.homePhone}
                    className={classNames(defaultcss.input, sty.homePhone)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__z464F
                    )}
                  >
                    {"Mobile"}
                  </div>

                  <input
                    data-plasmic-name={"mobile"}
                    data-plasmic-override={overrides.mobile}
                    className={classNames(defaultcss.input, sty.mobile)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__tgc1W
                    )}
                  >
                    {"Work Telephone"}
                  </div>

                  <input
                    data-plasmic-name={"workPhone"}
                    data-plasmic-override={overrides.workPhone}
                    className={classNames(defaultcss.input, sty.workPhone)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"infoRow5"}
                  data-plasmic-override={overrides.infoRow5}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.infoRow5)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__pw9Oi
                    )}
                  >
                    {"City"}
                  </div>

                  <input
                    data-plasmic-name={"city"}
                    data-plasmic-override={overrides.city}
                    className={classNames(defaultcss.input, sty.city)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__a6H2O
                    )}
                  >
                    {"State/Province"}
                  </div>

                  <input
                    data-plasmic-name={"state"}
                    data-plasmic-override={overrides.state}
                    className={classNames(defaultcss.input, sty.state)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__rszMw
                    )}
                  >
                    {"Zip/Postal Code"}
                  </div>

                  <input
                    data-plasmic-name={"zip"}
                    data-plasmic-override={overrides.zip}
                    className={classNames(defaultcss.input, sty.zip)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"infoRow6"}
                  data-plasmic-override={overrides.infoRow6}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.infoRow6)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__xa595
                    )}
                  >
                    {"Work Email"}
                  </div>

                  <input
                    data-plasmic-name={"email"}
                    data-plasmic-override={overrides.email}
                    className={classNames(defaultcss.input, sty.email)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___2XbGz
                    )}
                  >
                    {"Country"}
                  </div>

                  <input
                    data-plasmic-name={"country"}
                    data-plasmic-override={overrides.country}
                    className={classNames(defaultcss.input, sty.country)}
                    placeholder={"Some placeholder" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"Some Value" as const}
                  />

                  <ButtonPrimary
                    data-plasmic-name={"saveButton"}
                    data-plasmic-override={overrides.saveButton}
                    className={classNames("__wab_instance", sty.saveButton)}
                    prop={"Save"}
                  />
                </p.Stack>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sidebar",
    "divider",
    "mainContent",
    "infoContent",
    "myInformation",
    "infoRow1",
    "firstName",
    "middleName",
    "lastName",
    "infoRow2",
    "genderBox",
    "male",
    "female",
    "maritalStatusBox",
    "infoRow3",
    "street1",
    "street2",
    "infoRow4",
    "homePhone",
    "mobile",
    "workPhone",
    "infoRow5",
    "city",
    "state",
    "zip",
    "infoRow6",
    "email",
    "country",
    "saveButton"
  ],
  sidebar: ["sidebar"],
  divider: [
    "divider",
    "mainContent",
    "infoContent",
    "myInformation",
    "infoRow1",
    "firstName",
    "middleName",
    "lastName",
    "infoRow2",
    "genderBox",
    "male",
    "female",
    "maritalStatusBox",
    "infoRow3",
    "street1",
    "street2",
    "infoRow4",
    "homePhone",
    "mobile",
    "workPhone",
    "infoRow5",
    "city",
    "state",
    "zip",
    "infoRow6",
    "email",
    "country",
    "saveButton"
  ],
  mainContent: [
    "mainContent",
    "infoContent",
    "myInformation",
    "infoRow1",
    "firstName",
    "middleName",
    "lastName",
    "infoRow2",
    "genderBox",
    "male",
    "female",
    "maritalStatusBox",
    "infoRow3",
    "street1",
    "street2",
    "infoRow4",
    "homePhone",
    "mobile",
    "workPhone",
    "infoRow5",
    "city",
    "state",
    "zip",
    "infoRow6",
    "email",
    "country",
    "saveButton"
  ],
  infoContent: [
    "infoContent",
    "myInformation",
    "infoRow1",
    "firstName",
    "middleName",
    "lastName",
    "infoRow2",
    "genderBox",
    "male",
    "female",
    "maritalStatusBox",
    "infoRow3",
    "street1",
    "street2",
    "infoRow4",
    "homePhone",
    "mobile",
    "workPhone",
    "infoRow5",
    "city",
    "state",
    "zip",
    "infoRow6",
    "email",
    "country",
    "saveButton"
  ],
  myInformation: ["myInformation"],
  infoRow1: ["infoRow1", "firstName", "middleName", "lastName"],
  firstName: ["firstName"],
  middleName: ["middleName"],
  lastName: ["lastName"],
  infoRow2: ["infoRow2", "genderBox", "male", "female", "maritalStatusBox"],
  genderBox: ["genderBox", "male", "female"],
  male: ["male"],
  female: ["female"],
  maritalStatusBox: ["maritalStatusBox"],
  infoRow3: ["infoRow3", "street1", "street2"],
  street1: ["street1"],
  street2: ["street2"],
  infoRow4: ["infoRow4", "homePhone", "mobile", "workPhone"],
  homePhone: ["homePhone"],
  mobile: ["mobile"],
  workPhone: ["workPhone"],
  infoRow5: ["infoRow5", "city", "state", "zip"],
  city: ["city"],
  state: ["state"],
  zip: ["zip"],
  infoRow6: ["infoRow6", "email", "country", "saveButton"],
  email: ["email"],
  country: ["country"],
  saveButton: ["saveButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sidebar: typeof Sidebar;
  divider: "div";
  mainContent: "div";
  infoContent: "div";
  myInformation: "div";
  infoRow1: "div";
  firstName: "input";
  middleName: "input";
  lastName: "input";
  infoRow2: "div";
  genderBox: "div";
  male: typeof CheckboxPrimary;
  female: typeof CheckboxPrimary;
  maritalStatusBox: typeof SelectBoxPrimary;
  infoRow3: "div";
  street1: "input";
  street2: "input";
  infoRow4: "div";
  homePhone: "input";
  mobile: "input";
  workPhone: "input";
  infoRow5: "div";
  city: "input";
  state: "input";
  zip: "input";
  infoRow6: "div";
  email: "input";
  country: "input";
  saveButton: typeof ButtonPrimary;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMyInfo__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMyInfo__VariantsArgs;
    args?: PlasmicMyInfo__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicMyInfo__Fetches;
  } & Omit<PlasmicMyInfo__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMyInfo__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMyInfo__ArgProps,
      internalVariantPropNames: PlasmicMyInfo__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicMyInfo__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMyInfo";
  } else {
    func.displayName = `PlasmicMyInfo.${nodeName}`;
  }
  return func;
}

export const PlasmicMyInfo = Object.assign(
  // Top-level PlasmicMyInfo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sidebar: makeNodeComponent("sidebar"),
    divider: makeNodeComponent("divider"),
    mainContent: makeNodeComponent("mainContent"),
    infoContent: makeNodeComponent("infoContent"),
    myInformation: makeNodeComponent("myInformation"),
    infoRow1: makeNodeComponent("infoRow1"),
    firstName: makeNodeComponent("firstName"),
    middleName: makeNodeComponent("middleName"),
    lastName: makeNodeComponent("lastName"),
    infoRow2: makeNodeComponent("infoRow2"),
    genderBox: makeNodeComponent("genderBox"),
    male: makeNodeComponent("male"),
    female: makeNodeComponent("female"),
    maritalStatusBox: makeNodeComponent("maritalStatusBox"),
    infoRow3: makeNodeComponent("infoRow3"),
    street1: makeNodeComponent("street1"),
    street2: makeNodeComponent("street2"),
    infoRow4: makeNodeComponent("infoRow4"),
    homePhone: makeNodeComponent("homePhone"),
    mobile: makeNodeComponent("mobile"),
    workPhone: makeNodeComponent("workPhone"),
    infoRow5: makeNodeComponent("infoRow5"),
    city: makeNodeComponent("city"),
    state: makeNodeComponent("state"),
    zip: makeNodeComponent("zip"),
    infoRow6: makeNodeComponent("infoRow6"),
    email: makeNodeComponent("email"),
    country: makeNodeComponent("country"),
    saveButton: makeNodeComponent("saveButton"),

    // Metadata about props expected for PlasmicMyInfo
    internalVariantProps: PlasmicMyInfo__VariantProps,
    internalArgProps: PlasmicMyInfo__ArgProps
  }
);

export default PlasmicMyInfo;
/* prettier-ignore-end */
