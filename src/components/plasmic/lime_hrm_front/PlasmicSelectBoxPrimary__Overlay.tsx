// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vQU939GjUi82K5u1iSBKF3
// Component: 2So9Rk1rQd8
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as pp from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_lime_hrm_front.module.css"; // plasmic-import: vQU939GjUi82K5u1iSBKF3/projectcss
import * as sty from "./PlasmicSelectBoxPrimary__Overlay.module.css"; // plasmic-import: 2So9Rk1rQd8/css

import SUPER__PlasmicSelectBoxPrimary from "./PlasmicSelectBoxPrimary"; // plasmic-import: 3HWfNZURm7l/render

export type PlasmicSelectBoxPrimary__Overlay__VariantMembers = {
  relativePlacement: "top" | "bottom" | "left" | "right";
};

export type PlasmicSelectBoxPrimary__Overlay__VariantsArgs = {
  relativePlacement?: SingleChoiceArg<"top" | "bottom" | "left" | "right">;
};

type VariantPropType = keyof PlasmicSelectBoxPrimary__Overlay__VariantsArgs;
export const PlasmicSelectBoxPrimary__Overlay__VariantProps =
  new Array<VariantPropType>("relativePlacement");

export type PlasmicSelectBoxPrimary__Overlay__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSelectBoxPrimary__Overlay__ArgsType;
export const PlasmicSelectBoxPrimary__Overlay__ArgProps =
  new Array<ArgPropType>("children");

export type PlasmicSelectBoxPrimary__Overlay__OverridesType = {
  root?: p.Flex<"div">;
  top?: p.Flex<"div">;
  middle?: p.Flex<"div">;
  left?: p.Flex<"div">;
  main?: p.Flex<"div">;
  right?: p.Flex<"div">;
  bottom?: p.Flex<"div">;
};

export interface DefaultSelectBoxPrimary__OverlayProps
  extends pp.BaseTriggeredOverlayProps {
  children?: React.ReactNode;
}

function PlasmicSelectBoxPrimary__Overlay__RenderFunc(props: {
  variants: PlasmicSelectBoxPrimary__Overlay__VariantsArgs;
  args: PlasmicSelectBoxPrimary__Overlay__ArgsType;
  overrides: PlasmicSelectBoxPrimary__Overlay__OverridesType;
  dataFetches?: PlasmicSelectBoxPrimary__Overlay__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const superContexts = {
    SelectBoxPrimary: React.useContext(SUPER__PlasmicSelectBoxPrimary.Context)
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {(hasVariant(variants, "relativePlacement", "bottom") ? true : false) ? (
        <div
          data-plasmic-name={"top"}
          data-plasmic-override={overrides.top}
          className={classNames(defaultcss.all, sty.top, {
            [sty.top__relativePlacement_bottom]: hasVariant(
              variants,
              "relativePlacement",
              "bottom"
            )
          })}
        />
      ) : null}

      <div
        data-plasmic-name={"middle"}
        data-plasmic-override={overrides.middle}
        className={classNames(defaultcss.all, sty.middle)}
      >
        {(hasVariant(variants, "relativePlacement", "right") ? true : false) ? (
          <div
            data-plasmic-name={"left"}
            data-plasmic-override={overrides.left}
            className={classNames(defaultcss.all, sty.left, {
              [sty.left__relativePlacement_right]: hasVariant(
                variants,
                "relativePlacement",
                "right"
              )
            })}
          />
        ) : null}

        <div
          data-plasmic-name={"main"}
          data-plasmic-override={overrides.main}
          className={classNames(defaultcss.all, sty.main)}
        >
          {p.renderPlasmicSlot({
            defaultContents: null,
            value: args.children
          })}
        </div>

        {(hasVariant(variants, "relativePlacement", "left") ? true : false) ? (
          <div
            data-plasmic-name={"right"}
            data-plasmic-override={overrides.right}
            className={classNames(defaultcss.all, sty.right, {
              [sty.right__relativePlacement_left]: hasVariant(
                variants,
                "relativePlacement",
                "left"
              )
            })}
          />
        ) : null}
      </div>

      {(hasVariant(variants, "relativePlacement", "top") ? true : false) ? (
        <div
          data-plasmic-name={"bottom"}
          data-plasmic-override={overrides.bottom}
          className={classNames(defaultcss.all, sty.bottom, {
            [sty.bottom__relativePlacement_top]: hasVariant(
              variants,
              "relativePlacement",
              "top"
            )
          })}
        />
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.BaseTriggeredOverlayProps>(
  props: P,
  ref: pp.TriggeredOverlayRef
) {
  return pp.useTriggeredOverlay(
    PlasmicSelectBoxPrimary__Overlay,
    props,
    {
      isPlacedTopVariant: { group: "relativePlacement", variant: "top" },
      isPlacedBottomVariant: { group: "relativePlacement", variant: "bottom" },
      isPlacedLeftVariant: { group: "relativePlacement", variant: "left" },
      isPlacedRightVariant: { group: "relativePlacement", variant: "right" },
      contentSlot: "children",
      root: "root"
    },

    ref
  );
}

const PlasmicDescendants = {
  root: ["root", "top", "middle", "left", "main", "right", "bottom"],
  top: ["top"],
  middle: ["middle", "left", "main", "right"],
  left: ["left"],
  main: ["main"],
  right: ["right"],
  bottom: ["bottom"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  top: "div";
  middle: "div";
  left: "div";
  main: "div";
  right: "div";
  bottom: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelectBoxPrimary__Overlay__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelectBoxPrimary__Overlay__VariantsArgs;
    args?: PlasmicSelectBoxPrimary__Overlay__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSelectBoxPrimary__Overlay__Fetches;
  } & Omit<PlasmicSelectBoxPrimary__Overlay__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSelectBoxPrimary__Overlay__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSelectBoxPrimary__Overlay__ArgProps,
      internalVariantPropNames: PlasmicSelectBoxPrimary__Overlay__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSelectBoxPrimary__Overlay__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelectBoxPrimary__Overlay";
  } else {
    func.displayName = `PlasmicSelectBoxPrimary__Overlay.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectBoxPrimary__Overlay = Object.assign(
  // Top-level PlasmicSelectBoxPrimary__Overlay renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    top: makeNodeComponent("top"),
    middle: makeNodeComponent("middle"),
    left: makeNodeComponent("left"),
    main: makeNodeComponent("main"),
    right: makeNodeComponent("right"),
    bottom: makeNodeComponent("bottom"),

    // Metadata about props expected for PlasmicSelectBoxPrimary__Overlay
    internalVariantProps: PlasmicSelectBoxPrimary__Overlay__VariantProps,
    internalArgProps: PlasmicSelectBoxPrimary__Overlay__ArgProps,

    useBehavior
  }
);

export default PlasmicSelectBoxPrimary__Overlay;
/* prettier-ignore-end */
