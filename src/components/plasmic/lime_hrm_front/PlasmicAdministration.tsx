// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vQU939GjUi82K5u1iSBKF3
// Component: -pgjNYrnST
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Sidebar from "../../Sidebar"; // plasmic-import: yoRVhunlI-d/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: puPU6pgA-z/component
import AdminTable from "../../AdminTable"; // plasmic-import: tm5vSvyu3h/component
import SelectBoxPrimary from "../../SelectBoxPrimary"; // plasmic-import: 3HWfNZURm7l/component
import SelectBoxPrimary__Option from "../../SelectBoxPrimary__Option"; // plasmic-import: dmwcrBXAMAY/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_lime_hrm_front.module.css"; // plasmic-import: vQU939GjUi82K5u1iSBKF3/projectcss
import * as sty from "./PlasmicAdministration.module.css"; // plasmic-import: -pgjNYrnST/css

export type PlasmicAdministration__VariantMembers = {};

export type PlasmicAdministration__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdministration__VariantsArgs;
export const PlasmicAdministration__VariantProps = new Array<VariantPropType>();

export type PlasmicAdministration__ArgsType = {};
type ArgPropType = keyof PlasmicAdministration__ArgsType;
export const PlasmicAdministration__ArgProps = new Array<ArgPropType>();

export type PlasmicAdministration__OverridesType = {
  root?: p.Flex<"div">;
  sidebar?: p.Flex<typeof Sidebar>;
  adminSection?: p.Flex<"div">;
  deleteButton?: p.Flex<"button">;
  adminTable?: p.Flex<typeof AdminTable>;
  filterEmployees?: p.Flex<"div">;
};

export interface DefaultAdministrationProps {
  className?: string;
}

function PlasmicAdministration__RenderFunc(props: {
  variants: PlasmicAdministration__VariantsArgs;
  args: PlasmicAdministration__ArgsType;
  overrides: PlasmicAdministration__OverridesType;
  dataFetches?: PlasmicAdministration__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance", sty.sidebar)}
          />

          <div
            data-plasmic-name={"adminSection"}
            data-plasmic-override={overrides.adminSection}
            className={classNames(defaultcss.all, sty.adminSection)}
          >
            <button
              data-plasmic-name={"deleteButton"}
              data-plasmic-override={overrides.deleteButton}
              className={classNames(
                defaultcss.button,
                defaultcss.__wab_text,
                sty.deleteButton
              )}
            >
              {"Delete"}
            </button>

            <ButtonPrimary
              className={classNames("__wab_instance", sty.buttonPrimary__lwf0I)}
              prop={"Add"}
            />
          </div>

          <AdminTable
            data-plasmic-name={"adminTable"}
            data-plasmic-override={overrides.adminTable}
            className={classNames("__wab_instance", sty.adminTable)}
          />

          <div
            data-plasmic-name={"filterEmployees"}
            data-plasmic-override={overrides.filterEmployees}
            className={classNames(defaultcss.all, sty.filterEmployees)}
          >
            <SelectBoxPrimary
              className={classNames(
                "__wab_instance",
                sty.selectBoxPrimary__h3JUv
              )}
            />

            <SelectBoxPrimary
              className={classNames(
                "__wab_instance",
                sty.selectBoxPrimary__kiSb6
              )}
            />

            <SelectBoxPrimary
              className={classNames(
                "__wab_instance",
                sty.selectBoxPrimary__x1J19
              )}
            />

            <SelectBoxPrimary
              className={classNames(
                "__wab_instance",
                sty.selectBoxPrimary__piE4A
              )}
            />

            <ButtonPrimary
              className={classNames("__wab_instance", sty.buttonPrimary__nMz)}
              prop={"Search"}
            />

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__dgG1I
              )}
            >
              {"Username"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__isZQi
              )}
            >
              {"User Role"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__qnbN
              )}
            >
              {"Employee Name"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__gBg0
              )}
            >
              {"Status"}
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox___7JdPe
              )}
            >
              {"Administration"}
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sidebar",
    "adminSection",
    "deleteButton",
    "adminTable",
    "filterEmployees"
  ],
  sidebar: ["sidebar"],
  adminSection: ["adminSection", "deleteButton"],
  deleteButton: ["deleteButton"],
  adminTable: ["adminTable"],
  filterEmployees: ["filterEmployees"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sidebar: typeof Sidebar;
  adminSection: "div";
  deleteButton: "button";
  adminTable: typeof AdminTable;
  filterEmployees: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdministration__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdministration__VariantsArgs;
    args?: PlasmicAdministration__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicAdministration__Fetches;
  } & Omit<PlasmicAdministration__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAdministration__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAdministration__ArgProps,
      internalVariantPropNames: PlasmicAdministration__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicAdministration__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdministration";
  } else {
    func.displayName = `PlasmicAdministration.${nodeName}`;
  }
  return func;
}

export const PlasmicAdministration = Object.assign(
  // Top-level PlasmicAdministration renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sidebar: makeNodeComponent("sidebar"),
    adminSection: makeNodeComponent("adminSection"),
    deleteButton: makeNodeComponent("deleteButton"),
    adminTable: makeNodeComponent("adminTable"),
    filterEmployees: makeNodeComponent("filterEmployees"),

    // Metadata about props expected for PlasmicAdministration
    internalVariantProps: PlasmicAdministration__VariantProps,
    internalArgProps: PlasmicAdministration__ArgProps
  }
);

export default PlasmicAdministration;
/* prettier-ignore-end */
