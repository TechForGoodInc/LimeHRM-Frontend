// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vQU939GjUi82K5u1iSBKF3
// Component: _5SxwkcgXu
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Sidebar from "../../Sidebar"; // plasmic-import: yoRVhunlI-d/component
import SelectBoxPrimary from "../../SelectBoxPrimary"; // plasmic-import: 3HWfNZURm7l/component
import SelectBoxPrimary__Option from "../../SelectBoxPrimary__Option"; // plasmic-import: dmwcrBXAMAY/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: puPU6pgA-z/component
import RecruitmentTable from "../../RecruitmentTable"; // plasmic-import: 06awOUIVXL/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_lime_hrm_front.module.css"; // plasmic-import: vQU939GjUi82K5u1iSBKF3/projectcss
import * as sty from "./PlasmicRecruitment.module.css"; // plasmic-import: _5SxwkcgXu/css

export type PlasmicRecruitment__VariantMembers = {};

export type PlasmicRecruitment__VariantsArgs = {};
type VariantPropType = keyof PlasmicRecruitment__VariantsArgs;
export const PlasmicRecruitment__VariantProps = new Array<VariantPropType>();

export type PlasmicRecruitment__ArgsType = {};
type ArgPropType = keyof PlasmicRecruitment__ArgsType;
export const PlasmicRecruitment__ArgProps = new Array<ArgPropType>();

export type PlasmicRecruitment__OverridesType = {
  root?: p.Flex<"div">;
  sidebar?: p.Flex<typeof Sidebar>;
  divider?: p.Flex<"div">;
  filterCandidates?: p.Flex<"div">;
  selectBoxes?: p.Flex<"div">;
  jobTitle?: p.Flex<"div">;
  jobTitleSelect?: p.Flex<typeof SelectBoxPrimary>;
  candidateName?: p.Flex<"div">;
  candidateNameSelect?: p.Flex<typeof SelectBoxPrimary>;
  priority?: p.Flex<"div">;
  prioritySelect?: p.Flex<typeof SelectBoxPrimary>;
  status?: p.Flex<"div">;
  statusSelect?: p.Flex<typeof SelectBoxPrimary>;
  hiringManager?: p.Flex<"div">;
  hiringManagerSelect?: p.Flex<typeof SelectBoxPrimary>;
  date?: p.Flex<"div">;
  textbox?: p.Flex<"input">;
  buttons?: p.Flex<"div">;
  clearAllButton?: p.Flex<typeof ButtonPrimary>;
  filterButton?: p.Flex<typeof ButtonPrimary>;
  candidateInfo?: p.Flex<"div">;
  buttonPrimary?: p.Flex<typeof ButtonPrimary>;
  recruitmentTable?: p.Flex<typeof RecruitmentTable>;
};

export interface DefaultRecruitmentProps {
  className?: string;
}

function PlasmicRecruitment__RenderFunc(props: {
  variants: PlasmicRecruitment__VariantsArgs;
  args: PlasmicRecruitment__ArgsType;
  overrides: PlasmicRecruitment__OverridesType;
  dataFetches?: PlasmicRecruitment__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance", sty.sidebar)}
          />

          <p.Stack
            as={"div"}
            data-plasmic-name={"divider"}
            data-plasmic-override={overrides.divider}
            hasGap={true}
            className={classNames(defaultcss.all, sty.divider)}
          >
            <div
              data-plasmic-name={"filterCandidates"}
              data-plasmic-override={overrides.filterCandidates}
              className={classNames(defaultcss.all, sty.filterCandidates)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__fMy0M
                )}
              >
                {"Filter Candidates"}
              </div>

              <p.Stack
                as={"div"}
                data-plasmic-name={"selectBoxes"}
                data-plasmic-override={overrides.selectBoxes}
                hasGap={true}
                className={classNames(defaultcss.all, sty.selectBoxes)}
              >
                <div
                  data-plasmic-name={"jobTitle"}
                  data-plasmic-override={overrides.jobTitle}
                  className={classNames(defaultcss.all, sty.jobTitle)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__n9RMj
                    )}
                  >
                    {"Job Title"}
                  </div>

                  <SelectBoxPrimary
                    data-plasmic-name={"jobTitleSelect"}
                    data-plasmic-override={overrides.jobTitleSelect}
                    className={classNames("__wab_instance", sty.jobTitleSelect)}
                  />
                </div>

                <div
                  data-plasmic-name={"candidateName"}
                  data-plasmic-override={overrides.candidateName}
                  className={classNames(defaultcss.all, sty.candidateName)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__lvRuY
                    )}
                  >
                    {"Candidate Name"}
                  </div>

                  <SelectBoxPrimary
                    data-plasmic-name={"candidateNameSelect"}
                    data-plasmic-override={overrides.candidateNameSelect}
                    className={classNames(
                      "__wab_instance",
                      sty.candidateNameSelect
                    )}
                  />
                </div>

                <div
                  data-plasmic-name={"priority"}
                  data-plasmic-override={overrides.priority}
                  className={classNames(defaultcss.all, sty.priority)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__oDDuR
                    )}
                  >
                    {"Priority"}
                  </div>

                  <SelectBoxPrimary
                    data-plasmic-name={"prioritySelect"}
                    data-plasmic-override={overrides.prioritySelect}
                    className={classNames("__wab_instance", sty.prioritySelect)}
                  />
                </div>

                <div
                  data-plasmic-name={"status"}
                  data-plasmic-override={overrides.status}
                  className={classNames(defaultcss.all, sty.status)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__cptyE
                    )}
                  >
                    {"Status"}
                  </div>

                  <SelectBoxPrimary
                    data-plasmic-name={"statusSelect"}
                    data-plasmic-override={overrides.statusSelect}
                    className={classNames("__wab_instance", sty.statusSelect)}
                  />
                </div>

                <div
                  data-plasmic-name={"hiringManager"}
                  data-plasmic-override={overrides.hiringManager}
                  className={classNames(defaultcss.all, sty.hiringManager)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___05PmQ
                    )}
                  >
                    {"Hiring Manager"}
                  </div>

                  <SelectBoxPrimary
                    data-plasmic-name={"hiringManagerSelect"}
                    data-plasmic-override={overrides.hiringManagerSelect}
                    className={classNames(
                      "__wab_instance",
                      sty.hiringManagerSelect
                    )}
                  />
                </div>

                <div
                  data-plasmic-name={"date"}
                  data-plasmic-override={overrides.date}
                  className={classNames(defaultcss.all, sty.date)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__k9ItK
                    )}
                  >
                    {"Date"}
                  </div>

                  <input
                    data-plasmic-name={"textbox"}
                    data-plasmic-override={overrides.textbox}
                    className={classNames(defaultcss.input, sty.textbox)}
                    placeholder={"Date" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"" as const}
                  />
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"buttons"}
                data-plasmic-override={overrides.buttons}
                hasGap={true}
                className={classNames(defaultcss.all, sty.buttons)}
              >
                <ButtonPrimary
                  data-plasmic-name={"clearAllButton"}
                  data-plasmic-override={overrides.clearAllButton}
                  className={classNames("__wab_instance", sty.clearAllButton)}
                  prop={"Clear All"}
                />

                <ButtonPrimary
                  data-plasmic-name={"filterButton"}
                  data-plasmic-override={overrides.filterButton}
                  className={classNames("__wab_instance", sty.filterButton)}
                  prop={"Filter"}
                />
              </p.Stack>
            </div>

            <div
              data-plasmic-name={"candidateInfo"}
              data-plasmic-override={overrides.candidateInfo}
              className={classNames(defaultcss.all, sty.candidateInfo)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__iss1F
                )}
              >
                {"Candidate Information"}
              </div>

              <ButtonPrimary
                data-plasmic-name={"buttonPrimary"}
                data-plasmic-override={overrides.buttonPrimary}
                className={classNames("__wab_instance", sty.buttonPrimary)}
                prop={"Add"}
              />

              <RecruitmentTable
                data-plasmic-name={"recruitmentTable"}
                data-plasmic-override={overrides.recruitmentTable}
                className={classNames("__wab_instance", sty.recruitmentTable)}
              />
            </div>
          </p.Stack>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sidebar",
    "divider",
    "filterCandidates",
    "selectBoxes",
    "jobTitle",
    "jobTitleSelect",
    "candidateName",
    "candidateNameSelect",
    "priority",
    "prioritySelect",
    "status",
    "statusSelect",
    "hiringManager",
    "hiringManagerSelect",
    "date",
    "textbox",
    "buttons",
    "clearAllButton",
    "filterButton",
    "candidateInfo",
    "buttonPrimary",
    "recruitmentTable"
  ],
  sidebar: ["sidebar"],
  divider: [
    "divider",
    "filterCandidates",
    "selectBoxes",
    "jobTitle",
    "jobTitleSelect",
    "candidateName",
    "candidateNameSelect",
    "priority",
    "prioritySelect",
    "status",
    "statusSelect",
    "hiringManager",
    "hiringManagerSelect",
    "date",
    "textbox",
    "buttons",
    "clearAllButton",
    "filterButton",
    "candidateInfo",
    "buttonPrimary",
    "recruitmentTable"
  ],
  filterCandidates: [
    "filterCandidates",
    "selectBoxes",
    "jobTitle",
    "jobTitleSelect",
    "candidateName",
    "candidateNameSelect",
    "priority",
    "prioritySelect",
    "status",
    "statusSelect",
    "hiringManager",
    "hiringManagerSelect",
    "date",
    "textbox",
    "buttons",
    "clearAllButton",
    "filterButton"
  ],
  selectBoxes: [
    "selectBoxes",
    "jobTitle",
    "jobTitleSelect",
    "candidateName",
    "candidateNameSelect",
    "priority",
    "prioritySelect",
    "status",
    "statusSelect",
    "hiringManager",
    "hiringManagerSelect",
    "date",
    "textbox"
  ],
  jobTitle: ["jobTitle", "jobTitleSelect"],
  jobTitleSelect: ["jobTitleSelect"],
  candidateName: ["candidateName", "candidateNameSelect"],
  candidateNameSelect: ["candidateNameSelect"],
  priority: ["priority", "prioritySelect"],
  prioritySelect: ["prioritySelect"],
  status: ["status", "statusSelect"],
  statusSelect: ["statusSelect"],
  hiringManager: ["hiringManager", "hiringManagerSelect"],
  hiringManagerSelect: ["hiringManagerSelect"],
  date: ["date", "textbox"],
  textbox: ["textbox"],
  buttons: ["buttons", "clearAllButton", "filterButton"],
  clearAllButton: ["clearAllButton"],
  filterButton: ["filterButton"],
  candidateInfo: ["candidateInfo", "buttonPrimary", "recruitmentTable"],
  buttonPrimary: ["buttonPrimary"],
  recruitmentTable: ["recruitmentTable"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sidebar: typeof Sidebar;
  divider: "div";
  filterCandidates: "div";
  selectBoxes: "div";
  jobTitle: "div";
  jobTitleSelect: typeof SelectBoxPrimary;
  candidateName: "div";
  candidateNameSelect: typeof SelectBoxPrimary;
  priority: "div";
  prioritySelect: typeof SelectBoxPrimary;
  status: "div";
  statusSelect: typeof SelectBoxPrimary;
  hiringManager: "div";
  hiringManagerSelect: typeof SelectBoxPrimary;
  date: "div";
  textbox: "input";
  buttons: "div";
  clearAllButton: typeof ButtonPrimary;
  filterButton: typeof ButtonPrimary;
  candidateInfo: "div";
  buttonPrimary: typeof ButtonPrimary;
  recruitmentTable: typeof RecruitmentTable;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRecruitment__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRecruitment__VariantsArgs;
    args?: PlasmicRecruitment__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicRecruitment__Fetches;
  } & Omit<PlasmicRecruitment__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRecruitment__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRecruitment__ArgProps,
      internalVariantPropNames: PlasmicRecruitment__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicRecruitment__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRecruitment";
  } else {
    func.displayName = `PlasmicRecruitment.${nodeName}`;
  }
  return func;
}

export const PlasmicRecruitment = Object.assign(
  // Top-level PlasmicRecruitment renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sidebar: makeNodeComponent("sidebar"),
    divider: makeNodeComponent("divider"),
    filterCandidates: makeNodeComponent("filterCandidates"),
    selectBoxes: makeNodeComponent("selectBoxes"),
    jobTitle: makeNodeComponent("jobTitle"),
    jobTitleSelect: makeNodeComponent("jobTitleSelect"),
    candidateName: makeNodeComponent("candidateName"),
    candidateNameSelect: makeNodeComponent("candidateNameSelect"),
    priority: makeNodeComponent("priority"),
    prioritySelect: makeNodeComponent("prioritySelect"),
    status: makeNodeComponent("status"),
    statusSelect: makeNodeComponent("statusSelect"),
    hiringManager: makeNodeComponent("hiringManager"),
    hiringManagerSelect: makeNodeComponent("hiringManagerSelect"),
    date: makeNodeComponent("date"),
    textbox: makeNodeComponent("textbox"),
    buttons: makeNodeComponent("buttons"),
    clearAllButton: makeNodeComponent("clearAllButton"),
    filterButton: makeNodeComponent("filterButton"),
    candidateInfo: makeNodeComponent("candidateInfo"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    recruitmentTable: makeNodeComponent("recruitmentTable"),

    // Metadata about props expected for PlasmicRecruitment
    internalVariantProps: PlasmicRecruitment__VariantProps,
    internalArgProps: PlasmicRecruitment__ArgProps
  }
);

export default PlasmicRecruitment;
/* prettier-ignore-end */
