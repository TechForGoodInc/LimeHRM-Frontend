// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vQU939GjUi82K5u1iSBKF3
// Component: 9olutGEh6q
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_lime_hrm_front.module.css"; // plasmic-import: vQU939GjUi82K5u1iSBKF3/projectcss
import * as sty from "./PlasmicInputValues.module.css"; // plasmic-import: 9olutGEh6q/css

export type PlasmicInputValues__VariantMembers = {};

export type PlasmicInputValues__VariantsArgs = {};
type VariantPropType = keyof PlasmicInputValues__VariantsArgs;
export const PlasmicInputValues__VariantProps = new Array<VariantPropType>();

export type PlasmicInputValues__ArgsType = {};
type ArgPropType = keyof PlasmicInputValues__ArgsType;
export const PlasmicInputValues__ArgProps = new Array<ArgPropType>();

export type PlasmicInputValues__OverridesType = {
  inputValuesRow1?: p.Flex<"div">;
  fullName?: p.Flex<"div">;
  workerId?: p.Flex<"input">;
  middleName?: p.Flex<"input">;
  lastName?: p.Flex<"input">;
};

export interface DefaultInputValuesProps {
  className?: string;
}

function PlasmicInputValues__RenderFunc(props: {
  variants: PlasmicInputValues__VariantsArgs;
  args: PlasmicInputValues__ArgsType;
  overrides: PlasmicInputValues__OverridesType;
  dataFetches?: PlasmicInputValues__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"inputValuesRow1"}
      data-plasmic-override={overrides.inputValuesRow1}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.inputValuesRow1
      )}
    >
      <div
        data-plasmic-name={"fullName"}
        data-plasmic-override={overrides.fullName}
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.fullName
        )}
      >
        {"Full Name"}
      </div>

      <input
        data-plasmic-name={"workerId"}
        data-plasmic-override={overrides.workerId}
        className={classNames(defaultcss.input, sty.workerId)}
        placeholder={"Some placeholder" as const}
        size={1 as const}
        type={"text" as const}
        value={"First Name" as const}
      />

      <input
        data-plasmic-name={"middleName"}
        data-plasmic-override={overrides.middleName}
        className={classNames(defaultcss.input, sty.middleName)}
        placeholder={"Some placeholder" as const}
        size={1 as const}
        type={"text" as const}
        value={"Middle Name" as const}
      />

      <input
        data-plasmic-name={"lastName"}
        data-plasmic-override={overrides.lastName}
        className={classNames(defaultcss.input, sty.lastName)}
        placeholder={"Some placeholder" as const}
        size={1 as const}
        type={"text" as const}
        value={"Last Name" as const}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  inputValuesRow1: [
    "inputValuesRow1",
    "fullName",
    "workerId",
    "middleName",
    "lastName"
  ],
  fullName: ["fullName"],
  workerId: ["workerId"],
  middleName: ["middleName"],
  lastName: ["lastName"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  inputValuesRow1: "div";
  fullName: "div";
  workerId: "input";
  middleName: "input";
  lastName: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInputValues__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInputValues__VariantsArgs;
    args?: PlasmicInputValues__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicInputValues__Fetches;
  } & Omit<PlasmicInputValues__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInputValues__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicInputValues__ArgProps,
      internalVariantPropNames: PlasmicInputValues__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicInputValues__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "inputValuesRow1") {
    func.displayName = "PlasmicInputValues";
  } else {
    func.displayName = `PlasmicInputValues.${nodeName}`;
  }
  return func;
}

export const PlasmicInputValues = Object.assign(
  // Top-level PlasmicInputValues renders the root element
  makeNodeComponent("inputValuesRow1"),
  {
    // Helper components rendering sub-elements
    fullName: makeNodeComponent("fullName"),
    workerId: makeNodeComponent("workerId"),
    middleName: makeNodeComponent("middleName"),
    lastName: makeNodeComponent("lastName"),

    // Metadata about props expected for PlasmicInputValues
    internalVariantProps: PlasmicInputValues__VariantProps,
    internalArgProps: PlasmicInputValues__ArgProps
  }
);

export default PlasmicInputValues;
/* prettier-ignore-end */
