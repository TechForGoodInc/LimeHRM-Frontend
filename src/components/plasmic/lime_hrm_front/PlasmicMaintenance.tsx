// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vQU939GjUi82K5u1iSBKF3
// Component: RDbTl75Xg4
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Sidebar from "../../Sidebar"; // plasmic-import: yoRVhunlI-d/component
import SelectBoxPrimary from "../../SelectBoxPrimary"; // plasmic-import: 3HWfNZURm7l/component
import SelectBoxPrimary__Option from "../../SelectBoxPrimary__Option"; // plasmic-import: dmwcrBXAMAY/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: puPU6pgA-z/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_lime_hrm_front.module.css"; // plasmic-import: vQU939GjUi82K5u1iSBKF3/projectcss
import * as sty from "./PlasmicMaintenance.module.css"; // plasmic-import: RDbTl75Xg4/css

export type PlasmicMaintenance__VariantMembers = {};

export type PlasmicMaintenance__VariantsArgs = {};
type VariantPropType = keyof PlasmicMaintenance__VariantsArgs;
export const PlasmicMaintenance__VariantProps = new Array<VariantPropType>();

export type PlasmicMaintenance__ArgsType = {};
type ArgPropType = keyof PlasmicMaintenance__ArgsType;
export const PlasmicMaintenance__ArgProps = new Array<ArgPropType>();

export type PlasmicMaintenance__OverridesType = {
  root?: p.Flex<"div">;
  sidebar?: p.Flex<typeof Sidebar>;
  primaryDiv?: p.Flex<"div">;
  pageContent?: p.Flex<"div">;
  downloadUser?: p.Flex<"div">;
  downloadDept?: p.Flex<"div">;
  importExport?: p.Flex<"div">;
  _export?: p.Flex<"div">;
  _import?: p.Flex<"div">;
};

export interface DefaultMaintenanceProps {
  className?: string;
}

function PlasmicMaintenance__RenderFunc(props: {
  variants: PlasmicMaintenance__VariantsArgs;
  args: PlasmicMaintenance__ArgsType;
  overrides: PlasmicMaintenance__OverridesType;
  dataFetches?: PlasmicMaintenance__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance", sty.sidebar)}
          />

          <div
            data-plasmic-name={"primaryDiv"}
            data-plasmic-override={overrides.primaryDiv}
            className={classNames(defaultcss.all, sty.primaryDiv)}
          >
            <div
              data-plasmic-name={"pageContent"}
              data-plasmic-override={overrides.pageContent}
              className={classNames(defaultcss.all, sty.pageContent)}
            >
              <p.Stack
                as={"div"}
                data-plasmic-name={"downloadUser"}
                data-plasmic-override={overrides.downloadUser}
                hasGap={true}
                className={classNames(defaultcss.all, sty.downloadUser)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__nuG5Y
                  )}
                >
                  {"Download By User"}
                </div>

                <SelectBoxPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.selectBoxPrimary__mz17T
                  )}
                  placeholder={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__swLm
                      )}
                    >
                      {"Selectâ€¦"}
                    </div>
                  }
                />

                <ButtonPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.buttonPrimary__cu4Nu
                  )}
                  prop={"Download"}
                />
              </p.Stack>

              <p.Stack
                as={"div"}
                data-plasmic-name={"downloadDept"}
                data-plasmic-override={overrides.downloadDept}
                hasGap={true}
                className={classNames(defaultcss.all, sty.downloadDept)}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__ux9Ga
                  )}
                >
                  {"Download By Department"}
                </div>

                <SelectBoxPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.selectBoxPrimary__fmEuh
                  )}
                />

                <ButtonPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.buttonPrimary__s0Wyj
                  )}
                  prop={"Download"}
                />
              </p.Stack>

              <div
                data-plasmic-name={"importExport"}
                data-plasmic-override={overrides.importExport}
                className={classNames(defaultcss.all, sty.importExport)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"_export"}
                  data-plasmic-override={overrides._export}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty._export)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__m6PRw
                    )}
                  >
                    {"Export"}
                  </div>

                  <ButtonPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.buttonPrimary__terPv
                    )}
                    prop={"Download"}
                  />
                </p.Stack>

                <p.Stack
                  as={"div"}
                  data-plasmic-name={"_import"}
                  data-plasmic-override={overrides._import}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty._import)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__v37T
                    )}
                  >
                    {"Import"}
                  </div>

                  <ButtonPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.buttonPrimary__f0Bou
                    )}
                    prop={"Browse"}
                  />

                  <ButtonPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.buttonPrimary___9ZfCd
                    )}
                    prop={"Import"}
                  />
                </p.Stack>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sidebar",
    "primaryDiv",
    "pageContent",
    "downloadUser",
    "downloadDept",
    "importExport",
    "_export",
    "_import"
  ],
  sidebar: ["sidebar"],
  primaryDiv: [
    "primaryDiv",
    "pageContent",
    "downloadUser",
    "downloadDept",
    "importExport",
    "_export",
    "_import"
  ],
  pageContent: [
    "pageContent",
    "downloadUser",
    "downloadDept",
    "importExport",
    "_export",
    "_import"
  ],
  downloadUser: ["downloadUser"],
  downloadDept: ["downloadDept"],
  importExport: ["importExport", "_export", "_import"],
  _export: ["_export"],
  _import: ["_import"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sidebar: typeof Sidebar;
  primaryDiv: "div";
  pageContent: "div";
  downloadUser: "div";
  downloadDept: "div";
  importExport: "div";
  _export: "div";
  _import: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMaintenance__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMaintenance__VariantsArgs;
    args?: PlasmicMaintenance__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicMaintenance__Fetches;
  } & Omit<PlasmicMaintenance__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMaintenance__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMaintenance__ArgProps,
      internalVariantPropNames: PlasmicMaintenance__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicMaintenance__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMaintenance";
  } else {
    func.displayName = `PlasmicMaintenance.${nodeName}`;
  }
  return func;
}

export const PlasmicMaintenance = Object.assign(
  // Top-level PlasmicMaintenance renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sidebar: makeNodeComponent("sidebar"),
    primaryDiv: makeNodeComponent("primaryDiv"),
    pageContent: makeNodeComponent("pageContent"),
    downloadUser: makeNodeComponent("downloadUser"),
    downloadDept: makeNodeComponent("downloadDept"),
    importExport: makeNodeComponent("importExport"),
    _export: makeNodeComponent("_export"),
    _import: makeNodeComponent("_import"),

    // Metadata about props expected for PlasmicMaintenance
    internalVariantProps: PlasmicMaintenance__VariantProps,
    internalArgProps: PlasmicMaintenance__ArgProps
  }
);

export default PlasmicMaintenance;
/* prettier-ignore-end */
