// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vQU939GjUi82K5u1iSBKF3
// Component: eh95XJ3y5T5T9
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Textbox from "../../Textbox"; // plasmic-import: K9QvgezLGC5re/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: puPU6pgA-z/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_lime_hrm_front.module.css"; // plasmic-import: vQU939GjUi82K5u1iSBKF3/projectcss
import * as sty from "./PlasmicLogin.module.css"; // plasmic-import: eh95XJ3y5T5T9/css

import LogoGradientBlueLimesvgIcon from "./icons/PlasmicIcon__LogoGradientBlueLimesvg"; // plasmic-import: x0_EBXfLQg7MA/icon

export type PlasmicLogin__VariantMembers = {};

export type PlasmicLogin__VariantsArgs = {};
type VariantPropType = keyof PlasmicLogin__VariantsArgs;
export const PlasmicLogin__VariantProps = new Array<VariantPropType>();

export type PlasmicLogin__ArgsType = {};
type ArgPropType = keyof PlasmicLogin__ArgsType;
export const PlasmicLogin__ArgProps = new Array<ArgPropType>();

export type PlasmicLogin__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  loginContainer?: p.Flex<"div">;
  text?: p.Flex<"div">;
  loginDiv?: p.Flex<"div">;
  emailInput?: p.Flex<typeof Textbox>;
  passwordInput?: p.Flex<typeof Textbox>;
  loginButton?: p.Flex<typeof ButtonPrimary>;
  freeBox?: p.Flex<"div">;
};

export interface DefaultLoginProps {
  className?: string;
}

function PlasmicLogin__RenderFunc(props: {
  variants: PlasmicLogin__VariantsArgs;
  args: PlasmicLogin__ArgsType;
  overrides: PlasmicLogin__OverridesType;
  dataFetches?: PlasmicLogin__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      >
        <LogoGradientBlueLimesvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg)}
          role={"img"}
        />

        <p.Stack
          as={"div"}
          data-plasmic-name={"loginContainer"}
          data-plasmic-override={overrides.loginContainer}
          hasGap={true}
          className={classNames(defaultcss.all, sty.loginContainer)}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.text
            )}
          >
            {"Log in to your account"}
          </div>

          <p.Stack
            as={"div"}
            data-plasmic-name={"loginDiv"}
            data-plasmic-override={overrides.loginDiv}
            hasGap={true}
            className={classNames(defaultcss.all, sty.loginDiv)}
          >
            <Textbox
              data-plasmic-name={"emailInput"}
              data-plasmic-override={overrides.emailInput}
              className={classNames("__wab_instance", sty.emailInput)}
              placeholder={"Enter email" as const}
            />

            <Textbox
              data-plasmic-name={"passwordInput"}
              data-plasmic-override={overrides.passwordInput}
              className={classNames("__wab_instance", sty.passwordInput)}
              placeholder={"Enter password" as const}
            />

            <ButtonPrimary
              data-plasmic-name={"loginButton"}
              data-plasmic-override={overrides.loginButton}
              className={classNames("__wab_instance", sty.loginButton)}
              prop={
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox
                  )}
                >
                  {"Login"}
                </div>
              }
            />
          </p.Stack>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "svg",
    "loginContainer",
    "text",
    "loginDiv",
    "emailInput",
    "passwordInput",
    "loginButton",
    "freeBox"
  ],
  svg: ["svg"],
  loginContainer: [
    "loginContainer",
    "text",
    "loginDiv",
    "emailInput",
    "passwordInput",
    "loginButton",
    "freeBox"
  ],
  text: ["text"],
  loginDiv: [
    "loginDiv",
    "emailInput",
    "passwordInput",
    "loginButton",
    "freeBox"
  ],
  emailInput: ["emailInput"],
  passwordInput: ["passwordInput"],
  loginButton: ["loginButton", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
  loginContainer: "div";
  text: "div";
  loginDiv: "div";
  emailInput: typeof Textbox;
  passwordInput: typeof Textbox;
  loginButton: typeof ButtonPrimary;
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogin__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogin__VariantsArgs;
    args?: PlasmicLogin__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicLogin__Fetches;
  } & Omit<PlasmicLogin__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLogin__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLogin__ArgProps,
      internalVariantPropNames: PlasmicLogin__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicLogin__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogin";
  } else {
    func.displayName = `PlasmicLogin.${nodeName}`;
  }
  return func;
}

export const PlasmicLogin = Object.assign(
  // Top-level PlasmicLogin renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    loginContainer: makeNodeComponent("loginContainer"),
    text: makeNodeComponent("text"),
    loginDiv: makeNodeComponent("loginDiv"),
    emailInput: makeNodeComponent("emailInput"),
    passwordInput: makeNodeComponent("passwordInput"),
    loginButton: makeNodeComponent("loginButton"),
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicLogin
    internalVariantProps: PlasmicLogin__VariantProps,
    internalArgProps: PlasmicLogin__ArgProps
  }
);

export default PlasmicLogin;
/* prettier-ignore-end */
