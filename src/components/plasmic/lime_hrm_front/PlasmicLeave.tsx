// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vQU939GjUi82K5u1iSBKF3
// Component: eWqFv7MHWi
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Sidebar from "../../Sidebar"; // plasmic-import: yoRVhunlI-d/component
import ApplyLeave from "../../ApplyLeave"; // plasmic-import: exv2JUik8JK/component
import SelectBoxPrimary from "../../SelectBoxPrimary"; // plasmic-import: 3HWfNZURm7l/component
import SelectBoxPrimary__Option from "../../SelectBoxPrimary__Option"; // plasmic-import: dmwcrBXAMAY/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: puPU6pgA-z/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_lime_hrm_front.module.css"; // plasmic-import: vQU939GjUi82K5u1iSBKF3/projectcss
import * as sty from "./PlasmicLeave.module.css"; // plasmic-import: eWqFv7MHWi/css

import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: WBwh6SdVOZ/icon

export type PlasmicLeave__VariantMembers = {
  myLeave: "myLeave";
};

export type PlasmicLeave__VariantsArgs = {
  myLeave?: SingleBooleanChoiceArg<"myLeave">;
};

type VariantPropType = keyof PlasmicLeave__VariantsArgs;
export const PlasmicLeave__VariantProps = new Array<VariantPropType>("myLeave");

export type PlasmicLeave__ArgsType = {};
type ArgPropType = keyof PlasmicLeave__ArgsType;
export const PlasmicLeave__ArgProps = new Array<ArgPropType>();

export type PlasmicLeave__OverridesType = {
  root?: p.Flex<"div">;
  sidebar?: p.Flex<typeof Sidebar>;
  applyLeave?: p.Flex<typeof ApplyLeave>;
  selectBoxPrimary?: p.Flex<typeof SelectBoxPrimary>;
  textarea?: p.Flex<"textarea">;
  buttonPrimary?: p.Flex<typeof ButtonPrimary>;
};

export interface DefaultLeaveProps {
  myLeave?: SingleBooleanChoiceArg<"myLeave">;
  className?: string;
}

function PlasmicLeave__RenderFunc(props: {
  variants: PlasmicLeave__VariantsArgs;
  args: PlasmicLeave__ArgsType;
  overrides: PlasmicLeave__OverridesType;
  dataFetches?: PlasmicLeave__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root,
            { [sty.root__myLeave]: hasVariant(variants, "myLeave", "myLeave") }
          )}
        >
          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance", sty.sidebar, {
              [sty.sidebar__myLeave]: hasVariant(variants, "myLeave", "myLeave")
            })}
          />

          <ApplyLeave
            data-plasmic-name={"applyLeave"}
            data-plasmic-override={overrides.applyLeave}
            className={classNames("__wab_instance", sty.applyLeave, {
              [sty.applyLeave__myLeave]: hasVariant(
                variants,
                "myLeave",
                "myLeave"
              )
            })}
          >
            <div
              className={classNames(defaultcss.all, sty.freeBox__uAoqk, {
                [sty.freeBox__myLeave__uAoqkflDvk]: hasVariant(
                  variants,
                  "myLeave",
                  "myLeave"
                )
              })}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__acQs2,
                  {
                    [sty.freeBox__myLeave__acQs2FlDvk]: hasVariant(
                      variants,
                      "myLeave",
                      "myLeave"
                    )
                  }
                )}
              >
                {"Apply"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__sx0NR,
                  {
                    [sty.freeBox__myLeave__sx0NRflDvk]: hasVariant(
                      variants,
                      "myLeave",
                      "myLeave"
                    )
                  }
                )}
              >
                {"Assign Leave"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__zVu7M,
                  {
                    [sty.freeBox__myLeave__zVu7MflDvk]: hasVariant(
                      variants,
                      "myLeave",
                      "myLeave"
                    )
                  }
                )}
              >
                {"My Leave"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__gteda
                )}
              >
                {"Leave List"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__bXawP
                )}
              >
                {"Reports"}
              </div>
            </div>

            <div
              className={classNames(defaultcss.all, sty.freeBox___08P0M, {
                [sty.freeBox__myLeave___08P0MflDvk]: hasVariant(
                  variants,
                  "myLeave",
                  "myLeave"
                )
              })}
            >
              <div
                className={classNames(defaultcss.all, sty.freeBox__osWyJ, {
                  [sty.freeBox__myLeave__osWyJflDvk]: hasVariant(
                    variants,
                    "myLeave",
                    "myLeave"
                  )
                })}
              >
                <div
                  className={classNames(defaultcss.all, sty.freeBox__yTkF5, {
                    [sty.freeBox__myLeave__yTkF5FlDvk]: hasVariant(
                      variants,
                      "myLeave",
                      "myLeave"
                    )
                  })}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox___0Gs5G,
                      {
                        [sty.freeBox__myLeave___0Gs5GflDvk]: hasVariant(
                          variants,
                          "myLeave",
                          "myLeave"
                        )
                      }
                    )}
                  >
                    {hasVariant(variants, "myLeave", "myLeave")
                      ? "Assign Leave"
                      : "Apply Leave"}
                  </div>
                </div>

                <Icon6Icon
                  className={classNames(defaultcss.all, sty.svg__bRvFi, {
                    [sty.svg__myLeave__bRvFiflDvk]: hasVariant(
                      variants,
                      "myLeave",
                      "myLeave"
                    )
                  })}
                  role={"img"}
                />

                <Icon6Icon
                  className={classNames(defaultcss.all, sty.svg__v4Lm, {
                    [sty.svg__myLeave__v4LmflDvk]: hasVariant(
                      variants,
                      "myLeave",
                      "myLeave"
                    )
                  })}
                  role={"img"}
                />

                {(hasVariant(variants, "myLeave", "myLeave") ? true : false) ? (
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__oNt6U,
                      {
                        [sty.freeBox__myLeave__oNt6UflDvk]: hasVariant(
                          variants,
                          "myLeave",
                          "myLeave"
                        )
                      }
                    )}
                  >
                    {hasVariant(variants, "myLeave", "myLeave")
                      ? "Type for hints"
                      : "Enter some text"}
                  </div>
                ) : null}
                {(hasVariant(variants, "myLeave", "myLeave") ? true : false) ? (
                  <label
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.label__pa6U1,
                      {
                        [sty.label__myLeave__pa6U1FlDvk]: hasVariant(
                          variants,
                          "myLeave",
                          "myLeave"
                        )
                      }
                    )}
                  >
                    {hasVariant(variants, "myLeave", "myLeave")
                      ? "Employee Name *"
                      : "Leave Type *"}
                  </label>
                ) : null}

                <SelectBoxPrimary
                  data-plasmic-name={"selectBoxPrimary"}
                  data-plasmic-override={overrides.selectBoxPrimary}
                  className={classNames(
                    "__wab_instance",
                    sty.selectBoxPrimary,
                    {
                      [sty.selectBoxPrimary__myLeave]: hasVariant(
                        variants,
                        "myLeave",
                        "myLeave"
                      )
                    }
                  )}
                />

                <label
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.label__hyr5L,
                    {
                      [sty.label__myLeave__hyr5LflDvk]: hasVariant(
                        variants,
                        "myLeave",
                        "myLeave"
                      )
                    }
                  )}
                >
                  {"Leave Type *"}
                </label>

                <label
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.label__j94C,
                    {
                      [sty.label__myLeave__j94CFlDvk]: hasVariant(
                        variants,
                        "myLeave",
                        "myLeave"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "myLeave", "myLeave")
                    ? "From Date *"
                    : "From Date"}
                </label>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox___8Xrr6,
                    {
                      [sty.freeBox__myLeave___8Xrr6FlDvk]: hasVariant(
                        variants,
                        "myLeave",
                        "myLeave"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "myLeave", "myLeave")
                    ? "yyyy-mm-dd"
                    : "mm-dd-yyyy"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__hWdaa,
                    {
                      [sty.freeBox__myLeave__hWdaaflDvk]: hasVariant(
                        variants,
                        "myLeave",
                        "myLeave"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "myLeave", "myLeave")
                    ? "yyyy-mm-dd"
                    : "mm-dd-yyyy"}
                </div>

                <label
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.label__lBdMf,
                    {
                      [sty.label__myLeave__lBdMfflDvk]: hasVariant(
                        variants,
                        "myLeave",
                        "myLeave"
                      )
                    }
                  )}
                >
                  {hasVariant(variants, "myLeave", "myLeave")
                    ? "To Date *"
                    : "To Date"}
                </label>

                <label
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.label__s75BI,
                    {
                      [sty.label__myLeave__s75BIflDvk]: hasVariant(
                        variants,
                        "myLeave",
                        "myLeave"
                      )
                    }
                  )}
                >
                  {"Comment"}
                </label>

                <textarea
                  data-plasmic-name={"textarea"}
                  data-plasmic-override={overrides.textarea}
                  className={classNames(defaultcss.textarea, sty.textarea, {
                    [sty.textarea__myLeave]: hasVariant(
                      variants,
                      "myLeave",
                      "myLeave"
                    )
                  })}
                  value={"This is a text area." as const}
                />

                <ButtonPrimary
                  data-plasmic-name={"buttonPrimary"}
                  data-plasmic-override={overrides.buttonPrimary}
                  className={classNames("__wab_instance", sty.buttonPrimary, {
                    [sty.buttonPrimary__myLeave]: hasVariant(
                      variants,
                      "myLeave",
                      "myLeave"
                    )
                  })}
                  prop={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__hZqpt
                      )}
                    >
                      {"Apply"}
                    </div>
                  }
                />
              </div>
            </div>
          </ApplyLeave>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sidebar",
    "applyLeave",
    "selectBoxPrimary",
    "textarea",
    "buttonPrimary"
  ],
  sidebar: ["sidebar"],
  applyLeave: ["applyLeave", "selectBoxPrimary", "textarea", "buttonPrimary"],
  selectBoxPrimary: ["selectBoxPrimary"],
  textarea: ["textarea"],
  buttonPrimary: ["buttonPrimary"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sidebar: typeof Sidebar;
  applyLeave: typeof ApplyLeave;
  selectBoxPrimary: typeof SelectBoxPrimary;
  textarea: "textarea";
  buttonPrimary: typeof ButtonPrimary;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLeave__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLeave__VariantsArgs;
    args?: PlasmicLeave__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicLeave__Fetches;
  } & Omit<PlasmicLeave__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLeave__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLeave__ArgProps,
      internalVariantPropNames: PlasmicLeave__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicLeave__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLeave";
  } else {
    func.displayName = `PlasmicLeave.${nodeName}`;
  }
  return func;
}

export const PlasmicLeave = Object.assign(
  // Top-level PlasmicLeave renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sidebar: makeNodeComponent("sidebar"),
    applyLeave: makeNodeComponent("applyLeave"),
    selectBoxPrimary: makeNodeComponent("selectBoxPrimary"),
    textarea: makeNodeComponent("textarea"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),

    // Metadata about props expected for PlasmicLeave
    internalVariantProps: PlasmicLeave__VariantProps,
    internalArgProps: PlasmicLeave__ArgProps
  }
);

export default PlasmicLeave;
/* prettier-ignore-end */
