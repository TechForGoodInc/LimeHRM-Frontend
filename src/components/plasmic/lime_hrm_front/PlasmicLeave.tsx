// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vQU939GjUi82K5u1iSBKF3
// Component: eWqFv7MHWi
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Sidebar from "../../Sidebar"; // plasmic-import: yoRVhunlI-d/component
import ApplyLeave from "../../ApplyLeave"; // plasmic-import: exv2JUik8JK/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_lime_hrm_front.module.css"; // plasmic-import: vQU939GjUi82K5u1iSBKF3/projectcss
import * as sty from "./PlasmicLeave.module.css"; // plasmic-import: eWqFv7MHWi/css

export type PlasmicLeave__VariantMembers = {};

export type PlasmicLeave__VariantsArgs = {};
type VariantPropType = keyof PlasmicLeave__VariantsArgs;
export const PlasmicLeave__VariantProps = new Array<VariantPropType>();

export type PlasmicLeave__ArgsType = {};
type ArgPropType = keyof PlasmicLeave__ArgsType;
export const PlasmicLeave__ArgProps = new Array<ArgPropType>();

export type PlasmicLeave__OverridesType = {
  root?: p.Flex<"div">;
  sidebar?: p.Flex<typeof Sidebar>;
  applyLeave?: p.Flex<typeof ApplyLeave>;
  nav?: p.Flex<"nav">;
  applylink?: p.Flex<"a">;
  assign?: p.Flex<"a">;
  myleave?: p.Flex<"a">;
  leaveist?: p.Flex<"a">;
  reports?: p.Flex<"a">;
  label?: p.Flex<"label">;
};

export interface DefaultLeaveProps {
  className?: string;
}

function PlasmicLeave__RenderFunc(props: {
  variants: PlasmicLeave__VariantsArgs;
  args: PlasmicLeave__ArgsType;
  overrides: PlasmicLeave__OverridesType;
  dataFetches?: PlasmicLeave__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      {}
      {}

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Sidebar
            data-plasmic-name={"sidebar"}
            data-plasmic-override={overrides.sidebar}
            className={classNames("__wab_instance", sty.sidebar)}
          />

          <ApplyLeave
            data-plasmic-name={"applyLeave"}
            data-plasmic-override={overrides.applyLeave}
            className={classNames("__wab_instance", sty.applyLeave)}
          >
            <nav
              data-plasmic-name={"nav"}
              data-plasmic-override={overrides.nav}
              className={classNames(defaultcss.all, sty.nav)}
            >
              <a
                data-plasmic-name={"applylink"}
                data-plasmic-override={overrides.applylink}
                className={classNames(defaultcss.all, sty.applylink)}
                href={"/" as const}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox___52FXw
                  )}
                >
                  {"Apply"}
                </div>
              </a>

              <a
                data-plasmic-name={"assign"}
                data-plasmic-override={overrides.assign}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.assign
                )}
                href={"/" as const}
              >
                {"Assign Leave"}
              </a>

              <a
                data-plasmic-name={"myleave"}
                data-plasmic-override={overrides.myleave}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.myleave
                )}
                href={"/leave:myleave" as const}
              >
                {"My Leave"}
              </a>

              <a
                data-plasmic-name={"leaveist"}
                data-plasmic-override={overrides.leaveist}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.leaveist
                )}
              >
                {"Leave List"}
              </a>

              <a
                data-plasmic-name={"reports"}
                data-plasmic-override={overrides.reports}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.reports
                )}
                href={"/leave:report" as const}
              >
                {"Reports"}
              </a>
            </nav>

            <div className={classNames(defaultcss.all, sty.freeBox___2Vx0F)}>
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__gWJb
                )}
              >
                {"Apply Leave"}
              </div>
            </div>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__anmNc
              )}
            >
              {"Enter some text"}
            </div>

            <div className={classNames(defaultcss.all, sty.freeBox__rvRb0)}>
              <label
                data-plasmic-name={"label"}
                data-plasmic-override={overrides.label}
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.label
                )}
              >
                {"Leave Type"}
              </label>
            </div>
          </ApplyLeave>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "sidebar",
    "applyLeave",
    "nav",
    "applylink",
    "assign",
    "myleave",
    "leaveist",
    "reports",
    "label"
  ],
  sidebar: ["sidebar"],
  applyLeave: [
    "applyLeave",
    "nav",
    "applylink",
    "assign",
    "myleave",
    "leaveist",
    "reports",
    "label"
  ],
  nav: ["nav", "applylink", "assign", "myleave", "leaveist", "reports"],
  applylink: ["applylink"],
  assign: ["assign"],
  myleave: ["myleave"],
  leaveist: ["leaveist"],
  reports: ["reports"],
  label: ["label"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  sidebar: typeof Sidebar;
  applyLeave: typeof ApplyLeave;
  nav: "nav";
  applylink: "a";
  assign: "a";
  myleave: "a";
  leaveist: "a";
  reports: "a";
  label: "label";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLeave__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLeave__VariantsArgs;
    args?: PlasmicLeave__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicLeave__Fetches;
  } & Omit<PlasmicLeave__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLeave__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLeave__ArgProps,
      internalVariantPropNames: PlasmicLeave__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicLeave__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLeave";
  } else {
    func.displayName = `PlasmicLeave.${nodeName}`;
  }
  return func;
}

export const PlasmicLeave = Object.assign(
  // Top-level PlasmicLeave renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sidebar: makeNodeComponent("sidebar"),
    applyLeave: makeNodeComponent("applyLeave"),
    nav: makeNodeComponent("nav"),
    applylink: makeNodeComponent("applylink"),
    assign: makeNodeComponent("assign"),
    myleave: makeNodeComponent("myleave"),
    leaveist: makeNodeComponent("leaveist"),
    reports: makeNodeComponent("reports"),
    label: makeNodeComponent("label"),

    // Metadata about props expected for PlasmicLeave
    internalVariantProps: PlasmicLeave__VariantProps,
    internalArgProps: PlasmicLeave__ArgProps
  }
);

export default PlasmicLeave;
/* prettier-ignore-end */
