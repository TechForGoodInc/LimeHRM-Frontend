// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vQU939GjUi82K5u1iSBKF3
// Component: exv2JUik8JK
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: puPU6pgA-z/component
import SelectBoxPrimary from "../../SelectBoxPrimary"; // plasmic-import: 3HWfNZURm7l/component
import SelectBoxPrimary__Option from "../../SelectBoxPrimary__Option"; // plasmic-import: dmwcrBXAMAY/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_lime_hrm_front.module.css"; // plasmic-import: vQU939GjUi82K5u1iSBKF3/projectcss
import * as sty from "./PlasmicApplyLeave.module.css"; // plasmic-import: exv2JUik8JK/css

export type PlasmicApplyLeave__VariantMembers = {};

export type PlasmicApplyLeave__VariantsArgs = {};
type VariantPropType = keyof PlasmicApplyLeave__VariantsArgs;
export const PlasmicApplyLeave__VariantProps = new Array<VariantPropType>();

export type PlasmicApplyLeave__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicApplyLeave__ArgsType;
export const PlasmicApplyLeave__ArgProps = new Array<ArgPropType>("children");

export type PlasmicApplyLeave__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultApplyLeaveProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicApplyLeave__RenderFunc(props: {
  variants: PlasmicApplyLeave__VariantsArgs;
  args: PlasmicApplyLeave__ArgsType;
  overrides: PlasmicApplyLeave__OverridesType;
  dataFetches?: PlasmicApplyLeave__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {p.renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <div className={classNames(defaultcss.all, sty.freeBox__seVa5)}>
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__yj8Gw
                )}
              >
                {"Apply"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__xtd1Q
                )}
              >
                {"Assign Leave"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__h0XS5
                )}
              >
                {"My Leave"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__sMmaK
                )}
              >
                {"Leave List"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox___93S06
                )}
              >
                {"Reports"}
              </div>
            </div>

            <div className={classNames(defaultcss.all, sty.freeBox__ec86T)}>
              <div className={classNames(defaultcss.all, sty.freeBox__hnSfZ)}>
                <div className={classNames(defaultcss.all, sty.freeBox__thulE)}>
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.freeBox__u7Skt
                    )}
                  >
                    {"Apply Leave"}
                  </div>
                </div>

                <ButtonPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.buttonPrimary__fesk
                  )}
                  prop={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__w6On9
                      )}
                    >
                      {"Edit"}
                    </div>
                  }
                />

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__f9VX
                  )}
                >
                  {"Enter some text"}
                </div>

                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__fgaiY
                  )}
                >
                  {"Enter some text"}
                </div>

                <textarea
                  className={classNames(
                    defaultcss.textarea,
                    sty.textarea___7GPf
                  )}
                  value={"This is a text area." as const}
                />

                <SelectBoxPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.selectBoxPrimary__x4HIq
                  )}
                />

                <label
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.label__o4Imn
                  )}
                >
                  {"Comment"}
                </label>

                <label
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.label__u0Kog
                  )}
                >
                  {"To Date"}
                </label>

                <label
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.label__bp2Zw
                  )}
                >
                  {"From Date"}
                </label>

                <label
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.label__ghgjH
                  )}
                >
                  {"Leave Type *"}
                </label>
              </div>
            </div>
          </React.Fragment>
        ),
        value: args.children
      })}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicApplyLeave__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicApplyLeave__VariantsArgs;
    args?: PlasmicApplyLeave__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicApplyLeave__Fetches;
  } & Omit<PlasmicApplyLeave__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicApplyLeave__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicApplyLeave__ArgProps,
      internalVariantPropNames: PlasmicApplyLeave__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicApplyLeave__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicApplyLeave";
  } else {
    func.displayName = `PlasmicApplyLeave.${nodeName}`;
  }
  return func;
}

export const PlasmicApplyLeave = Object.assign(
  // Top-level PlasmicApplyLeave renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicApplyLeave
    internalVariantProps: PlasmicApplyLeave__VariantProps,
    internalArgProps: PlasmicApplyLeave__ArgProps
  }
);

export default PlasmicApplyLeave;
/* prettier-ignore-end */
