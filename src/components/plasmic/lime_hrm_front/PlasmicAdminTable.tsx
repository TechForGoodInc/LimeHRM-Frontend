// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vQU939GjUi82K5u1iSBKF3
// Component: tm5vSvyu3h
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_lime_hrm_front.module.css"; // plasmic-import: vQU939GjUi82K5u1iSBKF3/projectcss
import * as sty from "./PlasmicAdminTable.module.css"; // plasmic-import: tm5vSvyu3h/css

export type PlasmicAdminTable__VariantMembers = {};

export type PlasmicAdminTable__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdminTable__VariantsArgs;
export const PlasmicAdminTable__VariantProps = new Array<VariantPropType>();

export type PlasmicAdminTable__ArgsType = {};
type ArgPropType = keyof PlasmicAdminTable__ArgsType;
export const PlasmicAdminTable__ArgProps = new Array<ArgPropType>();

export type PlasmicAdminTable__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultAdminTableProps {
  className?: string;
}

function PlasmicAdminTable__RenderFunc(props: {
  variants: PlasmicAdminTable__VariantsArgs;
  args: PlasmicAdminTable__ArgsType;
  overrides: PlasmicAdminTable__OverridesType;
  dataFetches?: PlasmicAdminTable__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.columns__plNrT)}>
        <div className={classNames(defaultcss.all, sty.column__wlDw0)}>
          <div className={classNames(defaultcss.all, sty.columns__jz1Xr)}>
            <div className={classNames(defaultcss.all, sty.column__dCowb)}>
              <div className={classNames(defaultcss.all, sty.columns___98SyD)}>
                <div
                  className={classNames(defaultcss.all, sty.column__jkejp)}
                />

                <div
                  className={classNames(defaultcss.all, sty.column__cwiuj)}
                />
              </div>
            </div>

            <div className={classNames(defaultcss.all, sty.column__nzf7U)}>
              <div className={classNames(defaultcss.all, sty.columns__zmNOv)}>
                <div
                  className={classNames(defaultcss.all, sty.column__lx9Z7)}
                />

                <div className={classNames(defaultcss.all, sty.column__p6Xg)} />
              </div>
            </div>
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.column__k2S59)}>
          <div className={classNames(defaultcss.all, sty.columns___5HHWs)}>
            <div className={classNames(defaultcss.all, sty.column__zGLuC)}>
              <div className={classNames(defaultcss.all, sty.columns__bevzY)}>
                <div
                  className={classNames(defaultcss.all, sty.column__dvcYs)}
                />

                <div
                  className={classNames(defaultcss.all, sty.column__wFoJl)}
                />
              </div>
            </div>

            <div className={classNames(defaultcss.all, sty.column__hOwjy)}>
              <div className={classNames(defaultcss.all, sty.columns__qWwkh)}>
                <div
                  className={classNames(defaultcss.all, sty.column__hPRee)}
                />

                <div
                  className={classNames(defaultcss.all, sty.column__tm3QA)}
                />
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdminTable__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdminTable__VariantsArgs;
    args?: PlasmicAdminTable__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicAdminTable__Fetches;
  } & Omit<PlasmicAdminTable__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAdminTable__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAdminTable__ArgProps,
      internalVariantPropNames: PlasmicAdminTable__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicAdminTable__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdminTable";
  } else {
    func.displayName = `PlasmicAdminTable.${nodeName}`;
  }
  return func;
}

export const PlasmicAdminTable = Object.assign(
  // Top-level PlasmicAdminTable renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicAdminTable
    internalVariantProps: PlasmicAdminTable__VariantProps,
    internalArgProps: PlasmicAdminTable__ArgProps
  }
);

export default PlasmicAdminTable;
/* prettier-ignore-end */
