// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vQU939GjUi82K5u1iSBKF3
// Component: tm5vSvyu3h
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import CheckboxPrimary from "../../CheckboxPrimary"; // plasmic-import: txP424hXELb/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_lime_hrm_front.module.css"; // plasmic-import: vQU939GjUi82K5u1iSBKF3/projectcss
import * as sty from "./PlasmicAdminTable.module.css"; // plasmic-import: tm5vSvyu3h/css

export type PlasmicAdminTable__VariantMembers = {};

export type PlasmicAdminTable__VariantsArgs = {};
type VariantPropType = keyof PlasmicAdminTable__VariantsArgs;
export const PlasmicAdminTable__VariantProps = new Array<VariantPropType>();

export type PlasmicAdminTable__ArgsType = {};
type ArgPropType = keyof PlasmicAdminTable__ArgsType;
export const PlasmicAdminTable__ArgProps = new Array<ArgPropType>();

export type PlasmicAdminTable__OverridesType = {
  root?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  column2?: p.Flex<"div">;
  column1?: p.Flex<"div">;
  column3?: p.Flex<"div">;
  column4?: p.Flex<"div">;
  checkBoxColumn?: p.Flex<"div">;
  row1?: p.Flex<"div">;
  row2?: p.Flex<"div">;
  row3?: p.Flex<"div">;
};

export interface DefaultAdminTableProps {
  className?: string;
}

function PlasmicAdminTable__RenderFunc(props: {
  variants: PlasmicAdminTable__VariantsArgs;
  args: PlasmicAdminTable__ArgsType;
  overrides: PlasmicAdminTable__OverridesType;
  dataFetches?: PlasmicAdminTable__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(defaultcss.all, sty.columns)}
      >
        <div
          data-plasmic-name={"column2"}
          data-plasmic-override={overrides.column2}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.column2
          )}
        >
          {"User Role"}
        </div>

        <div
          data-plasmic-name={"column1"}
          data-plasmic-override={overrides.column1}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.column1
          )}
        >
          {"Username"}
        </div>

        <div
          data-plasmic-name={"column3"}
          data-plasmic-override={overrides.column3}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.column3
          )}
        >
          {"Employee Name"}
        </div>

        <div
          data-plasmic-name={"column4"}
          data-plasmic-override={overrides.column4}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.column4
          )}
        >
          {"Status"}
        </div>
      </div>

      <div
        data-plasmic-name={"checkBoxColumn"}
        data-plasmic-override={overrides.checkBoxColumn}
        className={classNames(defaultcss.all, sty.checkBoxColumn)}
      >
        <CheckboxPrimary
          className={classNames("__wab_instance", sty.checkboxPrimary__b5Nii)}
        >
          {null}
        </CheckboxPrimary>

        <CheckboxPrimary
          className={classNames("__wab_instance", sty.checkboxPrimary__tDl5)}
        >
          {null}
        </CheckboxPrimary>

        <CheckboxPrimary
          className={classNames("__wab_instance", sty.checkboxPrimary__hjnRw)}
        >
          {null}
        </CheckboxPrimary>

        <CheckboxPrimary
          className={classNames("__wab_instance", sty.checkboxPrimary__nUwSa)}
        >
          {null}
        </CheckboxPrimary>

        <CheckboxPrimary
          className={classNames("__wab_instance", sty.checkboxPrimary__i3MgJ)}
        >
          {null}
        </CheckboxPrimary>

        <CheckboxPrimary
          className={classNames("__wab_instance", sty.checkboxPrimary___393Ze)}
        >
          {null}
        </CheckboxPrimary>

        <CheckboxPrimary
          className={classNames("__wab_instance", sty.checkboxPrimary__uZkHx)}
        >
          {null}
        </CheckboxPrimary>
      </div>

      <div className={classNames(defaultcss.all, sty.freeBox__f40Bx)}>
        <div
          data-plasmic-name={"row1"}
          data-plasmic-override={overrides.row1}
          className={classNames(defaultcss.all, sty.row1)}
        >
          <div className={classNames(defaultcss.all, sty.freeBox__hwUi)} />
        </div>

        <div
          data-plasmic-name={"row2"}
          data-plasmic-override={overrides.row2}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.row2
          )}
        >
          {"\n"}
        </div>

        <div
          data-plasmic-name={"row3"}
          data-plasmic-override={overrides.row3}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.row3
          )}
        >
          {"\n"}
        </div>

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__od7Tb
          )}
        >
          {"\n"}
        </div>

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__n0Ns
          )}
        >
          {"\n"}
        </div>
      </div>

      <div className={classNames(defaultcss.all, sty.freeBox__gpmM)}>
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__cjOts
          )}
        >
          {"\n"}
        </div>
      </div>

      <div className={classNames(defaultcss.all, sty.freeBox__rl727)} />
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "columns",
    "column2",
    "column1",
    "column3",
    "column4",
    "checkBoxColumn",
    "row1",
    "row2",
    "row3"
  ],
  columns: ["columns", "column2", "column1", "column3", "column4"],
  column2: ["column2"],
  column1: ["column1"],
  column3: ["column3"],
  column4: ["column4"],
  checkBoxColumn: ["checkBoxColumn"],
  row1: ["row1"],
  row2: ["row2"],
  row3: ["row3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  columns: "div";
  column2: "div";
  column1: "div";
  column3: "div";
  column4: "div";
  checkBoxColumn: "div";
  row1: "div";
  row2: "div";
  row3: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAdminTable__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAdminTable__VariantsArgs;
    args?: PlasmicAdminTable__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicAdminTable__Fetches;
  } & Omit<PlasmicAdminTable__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAdminTable__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAdminTable__ArgProps,
      internalVariantPropNames: PlasmicAdminTable__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicAdminTable__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAdminTable";
  } else {
    func.displayName = `PlasmicAdminTable.${nodeName}`;
  }
  return func;
}

export const PlasmicAdminTable = Object.assign(
  // Top-level PlasmicAdminTable renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    column2: makeNodeComponent("column2"),
    column1: makeNodeComponent("column1"),
    column3: makeNodeComponent("column3"),
    column4: makeNodeComponent("column4"),
    checkBoxColumn: makeNodeComponent("checkBoxColumn"),
    row1: makeNodeComponent("row1"),
    row2: makeNodeComponent("row2"),
    row3: makeNodeComponent("row3"),

    // Metadata about props expected for PlasmicAdminTable
    internalVariantProps: PlasmicAdminTable__VariantProps,
    internalArgProps: PlasmicAdminTable__ArgProps
  }
);

export default PlasmicAdminTable;
/* prettier-ignore-end */
