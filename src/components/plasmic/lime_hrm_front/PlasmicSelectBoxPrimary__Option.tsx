// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vQU939GjUi82K5u1iSBKF3
// Component: dmwcrBXAMAY
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as pp from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_lime_hrm_front.module.css"; // plasmic-import: vQU939GjUi82K5u1iSBKF3/projectcss
import * as sty from "./PlasmicSelectBoxPrimary__Option.module.css"; // plasmic-import: dmwcrBXAMAY/css

import SUPER__PlasmicSelectBoxPrimary from "./PlasmicSelectBoxPrimary"; // plasmic-import: 3HWfNZURm7l/render

export type PlasmicSelectBoxPrimary__Option__VariantMembers = {
  isSelected: "isSelected";
  isHighlighted: "isHighlighted";
  isDisabled: "isDisabled";
};

export type PlasmicSelectBoxPrimary__Option__VariantsArgs = {
  isSelected?: SingleBooleanChoiceArg<"isSelected">;
  isHighlighted?: SingleBooleanChoiceArg<"isHighlighted">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
};

type VariantPropType = keyof PlasmicSelectBoxPrimary__Option__VariantsArgs;
export const PlasmicSelectBoxPrimary__Option__VariantProps =
  new Array<VariantPropType>("isSelected", "isHighlighted", "isDisabled");

export type PlasmicSelectBoxPrimary__Option__ArgsType = {
  children?: React.ReactNode;
  value?: string;
  textValue?: string;
};

type ArgPropType = keyof PlasmicSelectBoxPrimary__Option__ArgsType;
export const PlasmicSelectBoxPrimary__Option__ArgProps = new Array<ArgPropType>(
  "children",
  "value",
  "textValue"
);

export type PlasmicSelectBoxPrimary__Option__OverridesType = {
  root?: p.Flex<"div">;
  labelContainer?: p.Flex<"div">;
};

export interface DefaultSelectBoxPrimary__OptionProps
  extends pp.BaseSelectOptionProps {}

function PlasmicSelectBoxPrimary__Option__RenderFunc(props: {
  variants: PlasmicSelectBoxPrimary__Option__VariantsArgs;
  args: PlasmicSelectBoxPrimary__Option__ArgsType;
  overrides: PlasmicSelectBoxPrimary__Option__OverridesType;
  dataFetches?: PlasmicSelectBoxPrimary__Option__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  const superContexts = {
    SelectBoxPrimary: React.useContext(SUPER__PlasmicSelectBoxPrimary.Context)
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__isDisabled]: hasVariant(
          variants,
          "isDisabled",
          "isDisabled"
        ),
        [sty.root__isHighlighted]: hasVariant(
          variants,
          "isHighlighted",
          "isHighlighted"
        ),
        [sty.root__isSelected]: hasVariant(variants, "isSelected", "isSelected")
      })}
    >
      <div
        data-plasmic-name={"labelContainer"}
        data-plasmic-override={overrides.labelContainer}
        className={classNames(defaultcss.all, sty.labelContainer)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Option",
          value: args.children,
          className: classNames(sty.slotChildren, {
            [sty.slotChildren__isHighlighted]: hasVariant(
              variants,
              "isHighlighted",
              "isHighlighted"
            ),
            [sty.slotChildren__isSelected]: hasVariant(
              variants,
              "isSelected",
              "isSelected"
            )
          })
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

function useBehavior<P extends pp.BaseSelectOptionProps>(
  props: P,
  ref: pp.SelectOptionRef
) {
  return pp.useSelectOption(
    PlasmicSelectBoxPrimary__Option,
    props,
    {
      isSelectedVariant: { group: "isSelected", variant: "isSelected" },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      isHighlightedVariant: {
        group: "isHighlighted",
        variant: "isHighlighted"
      },
      labelSlot: "children",
      root: "root",
      labelContainer: "labelContainer"
    },

    ref
  );
}

const PlasmicDescendants = {
  root: ["root", "labelContainer"],
  labelContainer: ["labelContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  labelContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSelectBoxPrimary__Option__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSelectBoxPrimary__Option__VariantsArgs;
    args?: PlasmicSelectBoxPrimary__Option__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSelectBoxPrimary__Option__Fetches;
  } & Omit<PlasmicSelectBoxPrimary__Option__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSelectBoxPrimary__Option__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSelectBoxPrimary__Option__ArgProps,
      internalVariantPropNames: PlasmicSelectBoxPrimary__Option__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSelectBoxPrimary__Option__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSelectBoxPrimary__Option";
  } else {
    func.displayName = `PlasmicSelectBoxPrimary__Option.${nodeName}`;
  }
  return func;
}

export const PlasmicSelectBoxPrimary__Option = Object.assign(
  // Top-level PlasmicSelectBoxPrimary__Option renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    labelContainer: makeNodeComponent("labelContainer"),

    // Metadata about props expected for PlasmicSelectBoxPrimary__Option
    internalVariantProps: PlasmicSelectBoxPrimary__Option__VariantProps,
    internalArgProps: PlasmicSelectBoxPrimary__Option__ArgProps,

    useBehavior
  }
);

export default PlasmicSelectBoxPrimary__Option;
/* prettier-ignore-end */
