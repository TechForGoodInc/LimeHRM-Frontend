// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: vQU939GjUi82K5u1iSBKF3
// Component: yoRVhunlI-d
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: puPU6pgA-z/component
import ButtonSidebar from "../../ButtonSidebar"; // plasmic-import: EIYCxcJrep/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_lime_hrm_front.module.css"; // plasmic-import: vQU939GjUi82K5u1iSBKF3/projectcss
import * as sty from "./PlasmicSidebar.module.css"; // plasmic-import: yoRVhunlI-d/css

import LogoGradientBlueLimesvgIcon from "./icons/PlasmicIcon__LogoGradientBlueLimesvg"; // plasmic-import: x0_EBXfLQg7MA/icon

export type PlasmicSidebar__VariantMembers = {};

export type PlasmicSidebar__VariantsArgs = {};
type VariantPropType = keyof PlasmicSidebar__VariantsArgs;
export const PlasmicSidebar__VariantProps = new Array<VariantPropType>();

export type PlasmicSidebar__ArgsType = {};
type ArgPropType = keyof PlasmicSidebar__ArgsType;
export const PlasmicSidebar__ArgProps = new Array<ArgPropType>();

export type PlasmicSidebar__OverridesType = {
  sidebarContainer?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  loggedInUser?: p.Flex<"div">;
  dashboardButton?: p.Flex<typeof ButtonPrimary>;
  myInfoButton?: p.Flex<typeof ButtonPrimary>;
  pageButtonContainer?: p.Flex<"div">;
  timeButton?: p.Flex<typeof ButtonSidebar>;
  leaveButton?: p.Flex<typeof ButtonSidebar>;
  performanceButton?: p.Flex<typeof ButtonSidebar>;
  payButton?: p.Flex<typeof ButtonSidebar>;
  recruitmentButton?: p.Flex<typeof ButtonSidebar>;
  adminButton?: p.Flex<typeof ButtonSidebar>;
  maintenanceButton?: p.Flex<typeof ButtonSidebar>;
  logoutButton?: p.Flex<typeof ButtonPrimary>;
};

export interface DefaultSidebarProps {
  className?: string;
}

function PlasmicSidebar__RenderFunc(props: {
  variants: PlasmicSidebar__VariantsArgs;
  args: PlasmicSidebar__ArgsType;
  overrides: PlasmicSidebar__OverridesType;
  dataFetches?: PlasmicSidebar__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"sidebarContainer"}
      data-plasmic-override={overrides.sidebarContainer}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.sidebarContainer
      )}
    >
      <LogoGradientBlueLimesvgIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        className={classNames(defaultcss.all, sty.svg)}
        role={"img"}
      />

      <div className={classNames(defaultcss.all, sty.freeBox___64QnN)}>
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__zjGtx
          )}
        >
          {"Signed in as"}
        </div>

        <div
          data-plasmic-name={"loggedInUser"}
          data-plasmic-override={overrides.loggedInUser}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.loggedInUser
          )}
        >
          {"someemail@techforgoodinc.org"}
        </div>
      </div>

      <ButtonPrimary
        data-plasmic-name={"dashboardButton"}
        data-plasmic-override={overrides.dashboardButton}
        className={classNames("__wab_instance", sty.dashboardButton)}
        prop={
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox___3IDz0
            )}
          >
            {"Dashboard"}
          </div>
        }
      />

      <ButtonPrimary
        data-plasmic-name={"myInfoButton"}
        data-plasmic-override={overrides.myInfoButton}
        className={classNames("__wab_instance", sty.myInfoButton)}
        prop={
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__caFeC
            )}
          >
            {"My Info"}
          </div>
        }
      />

      <div
        data-plasmic-name={"pageButtonContainer"}
        data-plasmic-override={overrides.pageButtonContainer}
        className={classNames(defaultcss.all, sty.pageButtonContainer)}
      >
        <ButtonSidebar
          data-plasmic-name={"timeButton"}
          data-plasmic-override={overrides.timeButton}
          className={classNames("__wab_instance", sty.timeButton)}
          time={"time" as const}
        >
          {"Time"}
        </ButtonSidebar>

        <ButtonSidebar
          data-plasmic-name={"leaveButton"}
          data-plasmic-override={overrides.leaveButton}
          className={classNames("__wab_instance", sty.leaveButton)}
          leave={"leave" as const}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__gJ44S
            )}
          >
            {"Leave"}
          </div>
        </ButtonSidebar>

        <ButtonSidebar
          data-plasmic-name={"performanceButton"}
          data-plasmic-override={overrides.performanceButton}
          className={classNames("__wab_instance", sty.performanceButton)}
          performance={"performance" as const}
        >
          {"Performance"}
        </ButtonSidebar>

        <ButtonSidebar
          data-plasmic-name={"payButton"}
          data-plasmic-override={overrides.payButton}
          className={classNames("__wab_instance", sty.payButton)}
          pay={"pay" as const}
        >
          {"Pay"}
        </ButtonSidebar>

        <ButtonSidebar
          data-plasmic-name={"recruitmentButton"}
          data-plasmic-override={overrides.recruitmentButton}
          className={classNames("__wab_instance", sty.recruitmentButton)}
          recruitment={"recruitment" as const}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__bWJic
            )}
          >
            {"Recruitment"}
          </div>
        </ButtonSidebar>

        <ButtonSidebar
          data-plasmic-name={"adminButton"}
          data-plasmic-override={overrides.adminButton}
          administration={"administration" as const}
          className={classNames("__wab_instance", sty.adminButton)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__nUnYi
            )}
          >
            {"Administration"}
          </div>
        </ButtonSidebar>

        <ButtonSidebar
          data-plasmic-name={"maintenanceButton"}
          data-plasmic-override={overrides.maintenanceButton}
          className={classNames("__wab_instance", sty.maintenanceButton)}
          maintenance={"maintenance" as const}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__n7NJd
            )}
          >
            {"Maintenance"}
          </div>
        </ButtonSidebar>
      </div>

      <ButtonPrimary
        data-plasmic-name={"logoutButton"}
        data-plasmic-override={overrides.logoutButton}
        className={classNames("__wab_instance", sty.logoutButton)}
        prop={"Logout"}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  sidebarContainer: [
    "sidebarContainer",
    "svg",
    "loggedInUser",
    "dashboardButton",
    "myInfoButton",
    "pageButtonContainer",
    "timeButton",
    "leaveButton",
    "performanceButton",
    "payButton",
    "recruitmentButton",
    "adminButton",
    "maintenanceButton",
    "logoutButton"
  ],
  svg: ["svg"],
  loggedInUser: ["loggedInUser"],
  dashboardButton: ["dashboardButton"],
  myInfoButton: ["myInfoButton"],
  pageButtonContainer: [
    "pageButtonContainer",
    "timeButton",
    "leaveButton",
    "performanceButton",
    "payButton",
    "recruitmentButton",
    "adminButton",
    "maintenanceButton"
  ],
  timeButton: ["timeButton"],
  leaveButton: ["leaveButton"],
  performanceButton: ["performanceButton"],
  payButton: ["payButton"],
  recruitmentButton: ["recruitmentButton"],
  adminButton: ["adminButton"],
  maintenanceButton: ["maintenanceButton"],
  logoutButton: ["logoutButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  sidebarContainer: "div";
  svg: "svg";
  loggedInUser: "div";
  dashboardButton: typeof ButtonPrimary;
  myInfoButton: typeof ButtonPrimary;
  pageButtonContainer: "div";
  timeButton: typeof ButtonSidebar;
  leaveButton: typeof ButtonSidebar;
  performanceButton: typeof ButtonSidebar;
  payButton: typeof ButtonSidebar;
  recruitmentButton: typeof ButtonSidebar;
  adminButton: typeof ButtonSidebar;
  maintenanceButton: typeof ButtonSidebar;
  logoutButton: typeof ButtonPrimary;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebar__VariantsArgs;
    args?: PlasmicSidebar__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicSidebar__Fetches;
  } & Omit<PlasmicSidebar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSidebar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSidebar__ArgProps,
      internalVariantPropNames: PlasmicSidebar__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicSidebar__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "sidebarContainer") {
    func.displayName = "PlasmicSidebar";
  } else {
    func.displayName = `PlasmicSidebar.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebar = Object.assign(
  // Top-level PlasmicSidebar renders the root element
  makeNodeComponent("sidebarContainer"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    loggedInUser: makeNodeComponent("loggedInUser"),
    dashboardButton: makeNodeComponent("dashboardButton"),
    myInfoButton: makeNodeComponent("myInfoButton"),
    pageButtonContainer: makeNodeComponent("pageButtonContainer"),
    timeButton: makeNodeComponent("timeButton"),
    leaveButton: makeNodeComponent("leaveButton"),
    performanceButton: makeNodeComponent("performanceButton"),
    payButton: makeNodeComponent("payButton"),
    recruitmentButton: makeNodeComponent("recruitmentButton"),
    adminButton: makeNodeComponent("adminButton"),
    maintenanceButton: makeNodeComponent("maintenanceButton"),
    logoutButton: makeNodeComponent("logoutButton"),

    // Metadata about props expected for PlasmicSidebar
    internalVariantProps: PlasmicSidebar__VariantProps,
    internalArgProps: PlasmicSidebar__ArgProps
  }
);

export default PlasmicSidebar;
/* prettier-ignore-end */
